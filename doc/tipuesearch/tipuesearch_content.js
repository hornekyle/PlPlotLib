var tipuesearch = {"pages":[{"text":"PlPlotLib PlPlotLib is a wrapper for PlPlot inspired by the interface of matplotlib. Developer Info Dr. Kyle Horne Assistant Professor, Mechanical and Energy Engineering, University of North Texas","tags":"home","loc":"index.html","title":" PlPlotLib "},{"text":"Procedures Procedure Location Procedure Type Description bar plplot_mod Subroutine Create a bar graph. barh plplot_mod Subroutine Create a bar graph. colorbar plplot_mod Subroutine Add a colorbar to the top of the plot contour plplot_mod Subroutine Plot contour lines. contourf plplot_mod Subroutine Plot filled contours. endsWith plplot_mod Function Test if text ends with str figure plplot_mod Subroutine Create a new figure fillBetween plplot_mod Subroutine Fill space between two lines getColorCode plplot_mod Function getFillCode plplot_mod Function getLineStyleCode plplot_mod Function Return the code for a line style getSymbolCode plplot_mod Function Return the code for a symbol style labels plplot_mod Subroutine Set x,y and plot labels legend plplot_mod Subroutine Create legend for plot data. mixval plplot_mod Function Return [hi,low] for an array\n FIXME: Implement as generic function for arrays 1d,2d,3d plot plplot_mod Subroutine Plot data using lines and or markers. printTypes kinds_mod Subroutine Print the integer kinds for each real type quiver plplot_mod Subroutine Plot vectors. resetPen plplot_mod Subroutine Reset pen to default state scatter plplot_mod Subroutine Create scatter plot of data. setColor plplot_mod Subroutine Set the current pen color setColormap plplot_mod Subroutine Set the continuous colormap setFillPattern plplot_mod Subroutine setIndexedColors plplot_mod Subroutine Setup the indexed colors setLineStyle plplot_mod Subroutine Set the current pen line style setLineWidth plplot_mod Subroutine setup plplot_mod Subroutine Setup PlPlot library, optionally overriding defaults\n FIXME show plplot_mod Subroutine Show the plots end finialize the PlPlot library startsWith plplot_mod Function Test if text starts with str subplot plplot_mod Subroutine Create a set of axes on a figure testBar main_prg Subroutine testContour main_prg Subroutine testFillBetween main_prg Subroutine testLegend main_prg Subroutine testPlot main_prg Subroutine testQuiver main_prg Subroutine testScatter main_prg Subroutine ticks plplot_mod Subroutine Set the ticks for the axes xylim plplot_mod Subroutine Set the x and y ranges of the plot","tags":"list procedures","loc":"lists/procedures.html","title":"\nAll Procedures – PlPlotLib\n"},{"text":"Source Files File Description kinds.f90 main.f90 plplot.f90","tags":"list files","loc":"lists/files.html","title":"\nAll Files – PlPlotLib\n"},{"text":"Modules Module Source File Description kinds_mod kinds.f90 Module to manage kinds for the program plplot_mod plplot.f90 Wrapper module for plplot to give it a more matplotlib like personality","tags":"list modules","loc":"lists/modules.html","title":"\nAll Modules – PlPlotLib\n"},{"text":"kinds.f90 Source File Source File kinds.f90 Modules kinds_mod All Source Files kinds.f90 main.f90 plplot.f90 module kinds_mod !! Module to manage kinds for the program implicit none private !==============! != Real Kinds =! !==============! integer , parameter :: sp = selected_real_kind ( 6 ) !! Single precision integer , parameter :: dp = selected_real_kind ( 15 ) !! Double precision integer , parameter :: ep = selected_real_kind ( 18 ) !! Extended precision integer , parameter :: qp = selected_real_kind ( 32 ) !! Quad precision integer , parameter :: wp = dp !! Set working precision to double !==================! != Math Constants =! !==================! real ( wp ), parameter :: PI = 4.0_wp * atan ( 1.0_wp ) !! Archimedes' constant real ( wp ), parameter :: E = exp ( 1.0_wp ) !! Euler's constant !===========! != Exports =! !===========! public :: wp public :: PI , E public :: printTypes contains subroutine printTypes !! Print the integer kinds for each real type write ( * , * ) 'sp: ' , sp write ( * , * ) 'dp: ' , dp write ( * , * ) 'ep: ' , ep write ( * , * ) 'qp: ' , qp write ( * , * ) 'wp: ' , wp end subroutine printTypes end module kinds_mod © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"sourcefile/kinds.f90.html","title":"kinds.f90 – PlPlotLib"},{"text":"plplot.f90 Source File Source File plplot.f90 Modules plplot_mod All Source Files kinds.f90 main.f90 plplot.f90 module plplot_mod !! Wrapper module for plplot to give it a more matplotlib like personality use kinds_mod use plplot implicit none public character ( * ), parameter :: default_dev = 'qtwidget' !! Default output device !=================! != Library State =! !=================! logical :: isSetup = . false . !! Flag for library setup status logical :: didShow = . false . !! Flag for library display status real ( plflt ) :: fontScale = 1.0_plflt !! Font scale factor to resetPen logical :: blackOnWhite = . true . contains !===================! != Helper Routines =! !===================! function mixval ( x ) result ( b ) !! Return [hi,low] for an array !! FIXME: Implement as generic function for arrays 1d,2d,3d real ( wp ), dimension (:), intent ( in ) :: x !! Array to find extrema in real ( wp ), dimension ( 2 ) :: b b = [ minval ( x ), maxval ( x )] end function mixval function startsWith ( text , str ) result ( o ) !! Test if text starts with str character ( * ), intent ( in ) :: text !! Text to search character ( * ), intent ( in ) :: str !! String to look for logical :: o integer :: k k = len ( str ) o = text ( 1 : k ) == str end function startsWith function endsWith ( text , str ) result ( o ) !! Test if text ends with str character ( * ), intent ( in ) :: text !! Text to search character ( * ), intent ( in ) :: str !! String to look for logical :: o integer :: k k = len ( text ) o = text ( k - len ( str ) + 1 : k ) == str end function endsWith !============================! != Axes and Figure Routines =! !============================! subroutine figure !! Create a new figure if (. not . isSetup ) call setup () call pladv ( 0 ) end subroutine figure subroutine subplot ( ny , nx , i , aspect ) !! Create a set of axes on a figure integer , intent ( in ) :: nx !! Number of subplot columns integer , intent ( in ) :: ny !! Number of subplot rows integer , intent ( in ) :: i !! Subplot to use real ( wp ), intent ( in ), optional :: aspect !! Aspect ratio of the axes call plssub ( nx , ny ) call pladv ( i ) call resetPen if ( present ( aspect )) then call plvasp ( real ( aspect , plflt )) else call plvsta () end if end subroutine subplot subroutine xylim ( xb , yb ) !! Set the x and y ranges of the plot real ( wp ), dimension ( 2 ), intent ( in ) :: xb !! x-range of plot real ( wp ), dimension ( 2 ), intent ( in ) :: yb !! y-range of plot call plwind ( xb ( 1 ), xb ( 2 ), yb ( 1 ), yb ( 2 )) call resetPen end subroutine xylim subroutine ticks ( dx , dy , logx , logy , color , linewidth ) !! Set the ticks for the axes real ( wp ), intent ( in ), optional :: dx !! Spacing between ticks on x-axis real ( wp ), intent ( in ), optional :: dy !! Spacing between ticks on y-axis logical , intent ( in ), optional :: logx !! Flag for log-ticks and labels on x-axis logical , intent ( in ), optional :: logy !! Flag for log-ticks and labels on y-axis character ( * ), intent ( in ), optional :: color !! Color code for ticks, box, and labels real ( wp ), optional :: linewidth !! Line width for ticks and box real ( plflt ) :: dxl , dyl character ( 10 ) :: xopts , yopts dxl = 0.0_plflt if ( present ( dx )) dxl = dx dyl = 0.0_plflt if ( present ( dy )) dyl = dy xopts = 'bcnst' if ( present ( logx )) then if ( logx ) xopts = 'bcnstl' end if yopts = 'bcnstv' if ( present ( logy )) then if ( logy ) yopts = 'bcnstvl' end if if ( present ( color )) call setColor ( color ) if ( present ( linewidth )) call setLineWidth ( lineWidth ) call plbox ( xopts , dxl , 0 , yopts , dyl , 0 ) call resetPen end subroutine ticks subroutine labels ( xLabel , yLabel , plotLabel , color ) !! Set x,y and plot labels character ( * ), intent ( in ) :: xLabel !! Label for x-axis character ( * ), intent ( in ) :: yLabel !! Label for x-axis character ( * ), intent ( in ) :: plotLabel !! Label entire plot character ( * ), intent ( in ), optional :: color if ( present ( color )) call setColor ( color ) call pllab ( xLabel , yLabel , plotLabel ) call resetPen end subroutine labels subroutine colorbar ( z , N , leftLabel , rightLabel ) !! Add a colorbar to the top of the plot real ( wp ), dimension (:,:), intent ( in ) :: z !! Data used for levels computation integer , intent ( in ) :: N !! Number of levels to compute character ( * ), intent ( in ), optional :: leftLabel !! Label for left side of colorbar character ( * ), intent ( in ), optional :: rightLabel !! Label for right side of colorbar real ( plflt ), dimension (:,:), allocatable :: values character ( 64 ), dimension ( 2 ) :: labels real ( plflt ) :: fill_width real ( plflt ) :: cont_width integer :: cont_color real ( plflt ) :: colorbar_width real ( plflt ) :: colorbar_height integer :: k values = reshape ( & & [( real ( k - 1 , plflt ) / real ( N - 1 , plflt ) * ( maxval ( z ) - minval ( z )) + minval ( z ) , k = 1 , N )], & & [ N , 1 ]) fill_width = 2.0_plflt cont_width = 0.0_plflt cont_color = 1 labels = '' if ( present ( leftLabel )) labels ( 1 ) = leftLabel if ( present ( rightLabel )) labels ( 2 ) = rightLabel call plcolorbar ( colorbar_width , colorbar_height ,& & ior ( PL_COLORBAR_GRADIENT , PL_COLORBAR_SHADE_LABEL ), PL_POSITION_TOP ,& & 0.0_plflt , 0.01_plflt , 0.75_plflt , 0.05_plflt ,& & 0 , 1 , 1 , 0.0_plflt , 0.0_plflt , & & cont_color , cont_width , & & [ PL_COLORBAR_LABEL_LEFT , PL_COLORBAR_LABEL_RIGHT ], labels , & & [ 'bcvmt' ],[ 0.0_plflt ],[ 0 ],[ size ( values )], values ) end subroutine colorbar subroutine legend ( corner , series , lineWidths , markScales , markCounts , ncol ) !! Create legend for plot data. !! ![Example-1](../media/example-4.svg) !! !! FIXME: Text sizing should be modifiable character ( * ), intent ( in ) :: corner !! Corner for legend character ( * ), dimension (:,:), intent ( in ) :: series !! Data series in rows !! [name,textColor,lineStyle,lineColor,markStyle,markColor,boxColor] real ( wp ), dimension (:), intent ( in ), optional :: lineWidths !! Line widths for the plots real ( wp ), dimension (:), intent ( in ), optional :: markScales !! Marker sizes for the plots integer , dimension (:), intent ( in ), optional :: markCounts !! Marker counts for the plots integer , intent ( in ), optional :: ncol !! Number of columns real ( plflt ) :: width , height , xoff , yoff real ( plflt ) :: plotWidth integer :: opt , cornerl integer :: bg_color , bb_color , bb_style , lncol , lnrow integer , dimension ( size ( series , 1 )) :: opts real ( plflt ), dimension ( size ( series , 1 )) :: lwidths , mscales integer , dimension ( size ( series , 1 )) :: mcounts , text_colors real ( plflt ) :: text_offset , text_scale , text_spacing , text_justification integer , dimension ( size ( series , 1 )) :: box_colors , box_patterns real ( plflt ), dimension ( size ( series , 1 )) :: box_scales , box_line_widths integer , dimension ( size ( series , 1 )) :: line_colors , line_styles integer , dimension ( size ( series , 1 )) :: mark_colors character ( 64 ), dimension ( size ( series , 1 )) :: mark_styles integer :: k call doLegendBox opts = 0 do k = 1 , size ( series , 1 ) if ( series ( k , 3 ) /= '' ) opts ( k ) = ior ( opts ( k ), PL_LEGEND_LINE ) if ( series ( k , 5 ) /= '' ) opts ( k ) = ior ( opts ( k ), PL_LEGEND_SYMBOL ) if ( series ( k , 7 ) /= '' ) opts ( k ) = ior ( opts ( k ), PL_LEGEND_COLOR_BOX ) end do call doText call doBoxes call doLines call doMarkers call pllegend ( width , height , opt , cornerl , xoff , yoff , plotWidth , & & bg_color , bb_color , bb_style , & & lnrow , lncol , size ( series , 1 ), opts , text_offset , & & text_scale , text_spacing , text_justification , text_colors , series (:, 1 ), & & box_colors , box_patterns , box_scales , box_line_widths , & & line_colors , line_styles , lwidths , & & mark_colors , mscales , mcounts , mark_styles ) contains subroutine doLegendBox opt = PL_LEGEND_BACKGROUND + PL_LEGEND_BOUNDING_BOX cornerl = getCorner ( corner ) xoff = 0.0_plflt yoff = 0.0_plflt plotWidth = 0.05_wp bg_color = 0 bb_color = 1 bb_style = getLineStyleCode ( '-' ) lncol = 1 if ( present ( ncol )) lncol = ncol lnrow = size ( series , 1 ) / lncol end subroutine doLegendBox subroutine doText text_offset = 0.3_plflt text_scale = fontScale text_spacing = 3.0_plflt text_justification = 0.0_plflt do k = 1 , size ( series , 1 ) text_colors = getColorCode ( series ( k , 2 )) end do end subroutine doText subroutine doBoxes do k = 1 , size ( series , 1 ) box_colors = getColorCode ( series ( k , 7 )) end do box_patterns = 0 box_scales = 0.5_plflt box_line_widths = 0.0_plflt end subroutine doBoxes subroutine doLines lwidths = 1.0_plflt if ( present ( lineWidths )) lwidths = lineWidths do k = 1 , size ( series , 1 ) line_colors ( k ) = getColorCode ( series ( k , 4 )) line_styles ( k ) = getLineStyleCode ( series ( k , 3 )) end do end subroutine doLines subroutine doMarkers mcounts = 2 if ( present ( markCounts )) mcounts = markCounts mscales = 1.0_plflt if ( present ( markScales )) mscales = markScales do k = 1 , size ( series , 1 ) mark_colors ( k ) = getColorCode ( series ( k , 6 )) mark_styles ( k ) = getSymbolCode ( series ( k , 5 )) end do end subroutine doMarkers function getCorner ( text ) result ( code ) character ( * ), intent ( in ) :: text integer :: code code = PL_POSITION_INSIDE if ( startsWith ( text , 'upper' ) ) code = code + PL_POSITION_TOP if ( startsWith ( text , 'lower' ) ) code = code + PL_POSITION_BOTTOM if ( endsWith ( text , 'right' ) ) code = code + PL_POSITION_RIGHT if ( endsWith ( text , 'left' ) ) code = code + PL_POSITION_LEFT end function getCorner end subroutine legend !=====================! != Plotting Routines =! !=====================! subroutine scatter ( x , y , c , s , markColor , markStyle , markSize ) !! Create scatter plot of data. !! ![Example-1](../media/example-2.svg) real ( wp ), dimension (:), intent ( in ) :: x !! x-coordinates of data real ( wp ), dimension (:), intent ( in ) :: y !! y-coordinates of data real ( wp ), dimension (:), intent ( in ), optional :: c !! Data for smooth coloring real ( wp ), dimension (:), intent ( in ), optional :: s !! Data for marker scaling character ( * ), intent ( in ), optional :: markColor !! Color of markers; overridden by z character ( * ), intent ( in ), optional :: markStyle !! Style of markers real ( wp ), intent ( in ), optional :: markSize !! Size of markers real ( plflt ), dimension (:), allocatable :: xl , yl real ( plflt ), dimension (:), allocatable :: cb character ( 32 ) :: code integer :: k xl = x yl = y if ( present ( markColor )) call setColor ( markColor ) code = getSymbolCode ( '' ) if ( present ( markStyle )) code = getSymbolCode ( markStyle ) if ( present ( markSize )) call plssym ( 0.0_plflt , real ( markSize , plflt )) if ( present ( c )) cb = mixval ( c ) do k = 1 , size ( x ) if ( present ( c )) call plcol1 ( ( c ( k ) - cb ( 1 )) / ( cb ( 2 ) - cb ( 1 )) ) if ( present ( s )) call plschr ( 0.0_plflt , s ( k )) if ( present ( s )) call plssym ( 0.0_plflt , s ( k )) call plptex ( x ( k ), y ( k ), 0.0_plflt , 0.0_plflt , 0.5_plflt , code ) end do call resetPen end subroutine scatter subroutine plot ( x , y , lineColor , lineStyle , lineWidth , markColor , markStyle , markSize ) !! Plot data using lines and or markers. !! ![Example-1](../media/example-1.svg) real ( wp ), dimension (:), intent ( in ) :: x !! x-data for plot real ( wp ), dimension (:), intent ( in ) :: y !! y-data for plot character ( * ), intent ( in ), optional :: lineColor !! Color of line character ( * ), intent ( in ), optional :: lineStyle !! Style of line; '' for no line real ( wp ), intent ( in ), optional :: lineWidth !! Width of line character ( * ), intent ( in ), optional :: markColor !! Color of markers, if any character ( * ), intent ( in ), optional :: markStyle !! Style of markers; '' or absent for none real ( wp ), intent ( in ), optional :: markSize !! Size of markers, if any real ( plflt ), dimension (:), allocatable :: xl , yl character ( 32 ) :: code integer :: k xl = x yl = y if ( present ( lineColor )) call setColor ( lineColor ) if ( present ( lineWidth )) call setLineWidth ( lineWidth ) if ( present ( lineStyle )) then call setLineStyle ( lineStyle ) if ( lineStyle /= '' ) call plline ( x , y ) else call plline ( x , y ) end if call resetPen if ( present ( markColor )) call setColor ( markColor ) if ( present ( markSize )) call plssym ( 0.0_plflt , real ( markSize , plflt )) if ( present ( markStyle )) then code = getSymbolCode ( markStyle ) if ( markStyle /= '' ) then do k = 1 , size ( x ) call plptex ( x ( k ), y ( k ), 0.0_plflt , 0.0_plflt , 0.5_plflt , code ) end do end if end if call resetPen end subroutine plot subroutine contour ( x , y , z , N , lineColor , lineStyle , lineWidth ) !! Plot contour lines. !! ![Example-1](../media/example-3.svg) real ( wp ), dimension (:), intent ( in ) :: x !! x-coordinates of data real ( wp ), dimension (:), intent ( in ) :: y !! y-coordinates of data real ( wp ), dimension (:,:), intent ( in ) :: z !! Data for contouring integer , intent ( in ), optional :: N !! Number of levels to use in contour character ( * ), intent ( in ), optional :: lineColor !! Color of contour lines character ( * ), intent ( in ), optional :: lineStyle !! Style of contour lines real ( wp ), optional :: lineWidth !! Width of contour lines real ( plflt ), dimension (:), allocatable :: xl , yl real ( plflt ), dimension (:,:), allocatable :: zl real ( plflt ), dimension (:), allocatable :: edge integer :: Nl , k xl = x yl = y zl = z Nl = 20 if ( present ( N )) Nl = N edge = [( real ( k - 1 , plflt ) / real ( Nl - 1 , plflt ) * ( maxval ( zl ) - minval ( zl )) + minval ( zl ) , k = 1 , Nl )] if ( present ( lineColor )) call setColor ( lineColor ) if ( present ( lineStyle )) call setLineStyle ( lineStyle ) if ( present ( lineWidth )) call setLineWidth ( lineWidth ) call plcont ( zl , edge , x , y ) call resetPen end subroutine contour subroutine contourf ( x , y , z , N ) !! Plot filled contours. !! ![Example-1](../media/example-3.svg) real ( wp ), dimension (:), intent ( in ) :: x !! x-coordinates of data real ( wp ), dimension (:), intent ( in ) :: y !! y-coordinates of data real ( wp ), dimension (:,:), intent ( in ) :: z !! Data for contouring integer , intent ( in ), optional :: N !! Number of levels to use in contour real ( plflt ), dimension (:), allocatable :: xl , yl real ( plflt ), dimension (:,:), allocatable :: zl real ( plflt ), dimension (:), allocatable :: edge character ( 1 ) :: defined real ( plflt ) :: fill_width real ( plflt ) :: cont_width integer :: cont_color integer :: Nl , k xl = x yl = y zl = z Nl = 20 if ( present ( N )) Nl = N edge = [( real ( k - 1 , plflt ) / real ( Nl - 1 , plflt ) * ( maxval ( zl ) - minval ( zl )) + minval ( zl ) , k = 1 , Nl )] fill_width = - 1.0_plflt cont_width = - 1.0_plflt cont_color = - 1 call plshades ( zl , defined , minval ( xl ), maxval ( xl ), minval ( yl ), maxval ( yl ), & & edge , fill_width , cont_color , cont_width ) call resetPen end subroutine contourf subroutine quiver ( x , y , u , v , s , c , scaling , lineColor , lineStyle , lineWidth ) !! Plot vectors. !! ![Example-1](../media/example-5.svg) real ( wp ), dimension (:), intent ( in ) :: x !! x-positions of vectors real ( wp ), dimension (:), intent ( in ) :: y !! y-positions of vectors real ( wp ), dimension (:,:), intent ( in ) :: u !! u-components of vectors real ( wp ), dimension (:,:), intent ( in ) :: v !! v-components of vectors real ( wp ), dimension (:,:), intent ( in ), optional :: s !! Scale of vectors real ( wp ), dimension (:,:), intent ( in ), optional :: c !! Color values for vectors real ( wp ), intent ( in ), optional :: scaling !! Scaling of vectors !! < 0 = Automatic, then scaled !!   0 = Automatic !! > 0 = Directly scaled character ( * ), intent ( in ), optional :: lineColor !! Color of vectors character ( * ), intent ( in ), optional :: lineStyle !! Style of vectors' lines real ( wp ), optional :: lineWidth !! Width of vectors' lines real ( plflt ), dimension (:), allocatable :: xl , yl real ( plflt ), dimension (:,:), allocatable :: ul , vl , sl real ( plflt ), dimension ( 2 ) :: xb , yb , sb , cb , d real ( plflt ) :: scalingl , scl , mag integer :: i , j xl = x yl = y ul = u vl = v d = [ x ( 2 ) - x ( 1 ), y ( 2 ) - y ( 1 )] xb = mixval ( x ) yb = mixval ( y ) if ( present ( s )) then sl = s sl = sl / maxval ( sl ) else sl = u ** 2 + v ** 2 sl = sqrt ( sl ) sl = sl / maxval ( sl ) end if sb = [ minval ( sl ), maxval ( sl )] if ( present ( c )) cb = [ minval ( c ), maxval ( c )] scalingl = 1.0_plflt if ( present ( scaling )) scalingl = scaling if ( present ( lineColor )) call setColor ( lineColor ) if ( present ( lineStyle )) call setLineStyle ( lineStyle ) if ( present ( lineWidth )) call setLineWidth ( lineWidth ) do j = 1 , size ( u , 2 ) do i = 1 , size ( u , 1 ) mag = norm2 ([ ul ( i , j ), vl ( i , j )]) scl = scalingl * norm2 ( d ) * sl ( i , j ) if ( present ( c )) call plcol1 ( ( c ( i , j ) - cb ( 1 )) / ( cb ( 2 ) - cb ( 1 )) ) call plvect ( ul ( i : i , j : j ) / mag , vl ( i : i , j : j ) / mag , scl , xl ( i : i ), yl ( j : j )) end do end do call resetPen end subroutine quiver subroutine bar ( x , y , c , relWidth , fillColor , fillPattern , lineColor , lineWidth ) !! Create a bar graph. !! ![Example-1](../media/example-6.svg) real ( wp ), dimension (:), intent ( in ) :: x !! x-positions of the bars' centers real ( wp ), dimension (:), intent ( in ) :: y !! y-positions of the bars' tops real ( wp ), dimension (:), intent ( in ), optional :: c !! Color scale for bars real ( wp ), intent ( in ), optional :: relWidth !! Relative width of bars character ( * ), intent ( in ), optional :: fillColor !! Color of bar fills character ( * ), intent ( in ), optional :: fillPattern !! Pattern of bar fills character ( * ), intent ( in ), optional :: lineColor !! Color of lines around bars real ( wp ), optional :: lineWidth !! Width of lines around bars real ( plflt ), dimension ( 4 ) :: xl , yl real ( plflt ), dimension ( 2 ) :: cb real ( plflt ) :: dx , dxs integer :: k if ( present ( c )) cb = mixval ( c ) dxs = 0.8_wp if ( present ( relWidth )) dxs = relWidth dx = dxs * ( x ( 2 ) - x ( 1 )) / 2.0_wp if ( present ( lineWidth )) call setLineWidth ( lineWidth ) do k = 1 , size ( x ) xl = [ x ( k ) - dx , x ( k ) - dx , x ( k ) + dx , x ( k ) + dx ] yl = [ 0.0_wp , y ( k ), y ( k ), 0.0_wp ] if ( present ( fillColor )) call setColor ( fillColor ) if ( present ( fillPattern )) call setFillPattern ( fillPattern ) if ( present ( c )) call plcol1 ( ( c ( k ) - cb ( 1 )) / ( cb ( 2 ) - cb ( 1 )) ) call plfill ( xl , yl ) if ( present ( lineColor )) call setColor ( lineColor ) call plline ( xl , yl ) end do call resetPen end subroutine bar subroutine barh ( y , x , c , relWidth , fillColor , fillPattern , lineColor , lineWidth ) !! Create a bar graph. !! ![Example-1](../media/example-6.svg) real ( wp ), dimension (:), intent ( in ) :: y !! y-positions of the bars' centers real ( wp ), dimension (:), intent ( in ) :: x !! x-positions of the bars' tops real ( wp ), dimension (:), intent ( in ), optional :: c !! Color scale for bars real ( wp ), intent ( in ), optional :: relWidth !! Relative width of bars character ( * ), intent ( in ), optional :: fillColor !! Color of bar fills character ( * ), intent ( in ), optional :: fillPattern !! Pattern of bar fills character ( * ), intent ( in ), optional :: lineColor !! Color of lines around bars real ( wp ), optional :: lineWidth !! Width of lines around bars real ( plflt ), dimension ( 4 ) :: xl , yl real ( plflt ), dimension ( 2 ) :: cb real ( plflt ) :: dy , dys integer :: k if ( present ( c )) cb = mixval ( c ) dys = 0.8_wp if ( present ( relWidth )) dys = relWidth dy = dys * ( y ( 2 ) - y ( 1 )) / 2.0_wp if ( present ( lineWidth )) call setLineWidth ( lineWidth ) do k = 1 , size ( x ) yl = [ y ( k ) - dy , y ( k ) - dy , y ( k ) + dy , y ( k ) + dy ] xl = [ 0.0_wp , x ( k ), x ( k ), 0.0_wp ] if ( present ( fillColor )) call setColor ( fillColor ) if ( present ( fillPattern )) call setFillPattern ( fillPattern ) if ( present ( c )) call plcol1 ( ( c ( k ) - cb ( 1 )) / ( cb ( 2 ) - cb ( 1 )) ) call plfill ( xl , yl ) if ( present ( lineColor )) call setColor ( lineColor ) call plline ( xl , yl ) end do call resetPen end subroutine barh subroutine fillBetween ( x , y1 , y0 , fillColor , fillPattern , lineWidth ) !! Fill space between two lines !! ![Example-1](../media/example-7.svg) real ( wp ), dimension (:), intent ( in ) :: x real ( wp ), dimension (:), intent ( in ) :: y1 real ( wp ), dimension (:), intent ( in ), optional :: y0 character ( * ), intent ( in ), optional :: fillColor character ( * ), intent ( in ), optional :: fillPattern real ( wp ), intent ( in ), optional :: lineWidth real ( plflt ), dimension (:), allocatable :: xl , y1l , y0l integer :: N N = size ( x ) xl = x y1l = y1 if ( present ( y0 )) then y0l = y0 else allocate ( y0l ( N )) y0l = 0.0_plflt end if if ( present ( fillColor )) call setColor ( fillColor ) if ( present ( fillPattern )) call setFillPattern ( fillPattern ) if ( present ( lineWidth )) call setLineWidth ( lineWidth ) call plfill ([ xl ( 1 : N : 1 ), xl ( N : 1 : - 1 )],[ y1l ( 1 : N : 1 ), y0l ( N : 1 : - 1 )]) call resetPen end subroutine fillBetween ! fill_betweenx ! hist ! hist2d ! hexbin ! streamplot ! triplot ! tricolor ! tricontour ! tricontourf ! xyzlim ! surface ! plot3d !========================! != Drawing Pen Routines =! !========================! subroutine resetPen !! Reset pen to default state call setColor ( '' ) call setLineStyle ( '' ) call setLineWidth ( 0.5_wp ) call plschr ( 0.0_plflt , real ( fontScale , plflt )) call plssym ( 0.0_plflt , real ( fontScale , plflt )) end subroutine resetPen subroutine setLineWidth ( lineWidth ) real ( wp ), intent ( in ) :: lineWidth call plwidth ( real ( lineWidth , plflt )) end subroutine setLineWidth subroutine setLineStyle ( style ) !! Set the current pen line style character ( * ), intent ( in ) :: style !! Style to set call pllsty ( getLineStyleCode ( style )) end subroutine setLineStyle function getLineStyleCode ( style ) result ( code ) !! Return the code for a line style character ( * ), intent ( in ) :: style !! Style desired integer :: code select case ( style ) case ( '-' ) code = 1 case ( ':' ) code = 2 case ( '--' ) code = 3 case default code = 1 end select end function getLineStyleCode function getSymbolCode ( style ) result ( code ) !! Return the code for a symbol style character ( * ), intent ( in ) :: style !! Style desired character ( 32 ) :: code select case ( style ) case ( '+' ) code = '#(140)' case ( 'x' ) code = '#(141)' case ( '*' ) code = '#(142)' case ( '.' ) code = '#(143)' case ( 's' ) code = '#(144)' case ( ',' ) code = '#(850)' case ( '&#94;' ) code = '#(852)' case ( '<' ) code = '#(853)' case ( 'v' ) code = '#(854)' case ( '>' ) code = '#(855)' case default code = '#(143)' end select end function getSymbolCode subroutine setFillPattern ( style ) character ( * ), intent ( in ) :: style call plpsty ( getFillCode ( style )) end subroutine setFillPattern function getFillCode ( style ) result ( code ) character ( * ), intent ( in ) :: style integer :: code select case ( style ) case ( '-' ) code = 1 case ( '/' ) code = 3 case ( '|' ) code = 2 case ( '\\') code = 4 case(' # ') code = 7 case(' x ') code = 8 case default code = 0 end select end function getFillCode subroutine setColor(color) !! Set the current pen color character(*),intent(in)::color !! Name of color to set call plcol0(getColorCode(color)) end subroutine setColor function getColorCode(color) result(code) character(*),intent(in)::color integer::code select case(color) case(' w ',' white ') if(blackOnWhite) then code = 1 else code = 2 end if case(' k ',' black ') if(blackOnWhite) then code = 2 else code = 1 end if case(' r ',' red ') code = 3 case(' g ',' green ') code = 4 case(' b ',' blue ') code= 5 case(' c ',' cyan ') code = 6 case(' m ',' magenta ') code= 7 case(' y ',' yellow ') code = 8 case(' fg ') code = 2 case(' bg ') code = 1 case default code = 2 end select code = code-1 end function getColorCode !===========================! != Library Status Routines =! !===========================! subroutine setup(device,fileName,fontScaling,whiteOnBlack,colormap) !! Setup PlPlot library, optionally overriding defaults character(*),intent(in),optional::device !! Output device to use character(*),intent(in),optional::fileName !! Name of file(s) to write to !! %n will be replaced with the figure number real(wp),intent(in),optional::fontScaling !! Font scaling relative to default value logical,intent(in),optional::whiteOnBlack character(*),intent(in),optional::colormap !! Colormap to use if(isSetup) return isSetup = .true. if(present(device)) then call plsdev(device) else call plsdev(default_dev) end if call plsfam(1,1,100) if(present(fileName)) then call plsfnam(fileName) else call plsfnam(' out ') end if if(present(whiteOnBlack)) blackOnWhite = .not. whiteOnBlack call setIndexedColors if(present(colormap)) then call setColormap(colormap) else call setColormap(' CoolWarm ') end if call plfontld(0) if(present(fontScaling)) fontScale = fontScaling !! FIXME call plsetopt(' geometry ',' 400 x300 ') call plinit call resetPen end subroutine setup subroutine show !! Show the plots end finialize the PlPlot library if(.not.didShow) then call plend didShow = .true. end if end subroutine show !======================! != Color Map Routines =! !======================! subroutine setIndexedColors !! Setup the indexed colors integer,dimension(8,3)::rgb rgb(getColorCode(' w ')+1,:) = [255,255,255] ! White rgb(getColorCode(' k ')+1,:) = [  0,  0,  0] ! Black rgb(getColorCode(' r ')+1,:) = [255,  0,  0] ! Red rgb(getColorCode(' g ')+1,:) = [  0,255,  0] ! Green rgb(getColorCode(' b ')+1,:) = [  0,  0,255] ! Blue rgb(getColorCode(' c ')+1,:) = [  0,255,255] ! Cyan rgb(getColorCode(' m ')+1,:) = [255,  0,255] ! Magenta rgb(getColorCode(' y ')+1,:) = [255,255,255] ! Yellow call plscmap0(rgb(:,1),rgb(:,2),rgb(:,3)) end subroutine setIndexedColors subroutine setColormap(colormap) !! Set the continuous colormap character(*),intent(in)::colormap !! Name of colormap to use real(plflt),dimension(:),allocatable::i,h,s,v select case(colormap) case(' CoolWarm ') h = [240.0,195.0,45.0,0.0] s = [0.60, 0.95, 0.95, 0.60] v = [0.80, 0.30, 0.30, 0.80] i = [0.00, 0.50, 0.50, 1.00] call plscmap1n(256) call plscmap1l(.false.,i,h,s,v) case(' Gray ') call plspal1(' cmap1_gray . pal ',1) case(' BlueYellow ') call plspal1(' cmap1_blue_yellow . pal ',1) case(' BlueRed ') call plspal1(' cmap1_blue_red . pal ',1) case(' Radar ') call plspal1(' cmap1_radar . pal ',1) case(' HighFreq ') call plspal1(' cmap1_highfreq . pal ',1) case(' LowFreq ') call plspal1(' cmap1_lowfreq . pal ' , 1 ) end select end subroutine setColormap end module plplot_mod © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"sourcefile/plplot.f90.html","title":"plplot.f90 – PlPlotLib"},{"text":"main.f90 Source File Source File main.f90 Programs main_prg All Source Files kinds.f90 main.f90 plplot.f90 program main_prg use kinds_mod use plplot_mod implicit none call setup ( device = 'svgqt' , fileName = 'examples/example-%n.svg' , colormap = 'CoolWarm' , whiteOnBlack = . false .) call testPlot call testScatter call testContour call testLegend call testQuiver call testBar call testFillBetween call show contains subroutine testPlot integer , parameter :: N = 20 real ( wp ), dimension ( N ) :: x , y integer :: k x = [( real ( k - 1 , wp ) / real ( N - 1 , wp ) , k = 1 , N )] y = x ** 2 - 1.0_wp call figure () call subplot ( 1 , 1 , 1 ) call xylim ( mixval ( x ), mixval ( y )) call plot ( x , y , lineColor = 'red' , lineWidth = 2.0_wp , & & markStyle = '.' , markColor = 'cyan' , markSize = 2.0_wp ) call plot ( x , - 1.0_wp - y , lineColor = 'blue' , lineStyle = ':' , lineWidth = 2.0_wp , & & markStyle = '+' , markColor = 'green' , markSize = 1.0_wp ) call ticks () call labels ( 'x' , 'y' , 'f(x)=x#u2#d-1; g(x)=-x#u2#d' ) end subroutine testPlot subroutine testScatter integer , parameter :: N = 100 real ( wp ), dimension ( N ) :: x , y , z call random_number ( x ) call random_number ( y ) z = sqrt ( x ** 2 + y ** 2 ) call figure () call subplot ( 2 , 2 , 1 ) call xylim ([ 0.0_wp , 1.0_wp ],[ 0.0_wp , 1.0_wp ]) call scatter ( x , y ) call ticks () call labels ( 'x' , 'y' , '' ) call subplot ( 2 , 2 , 2 ) call xylim ([ 0.0_wp , 1.0_wp ],[ 0.0_wp , 1.0_wp ]) call scatter ( x , y , c = z ) call ticks () call labels ( 'x' , 'y' , '' ) call subplot ( 2 , 2 , 3 ) call xylim ([ 0.0_wp , 1.0_wp ],[ 0.0_wp , 1.0_wp ]) call scatter ( x , y , s = ( 4.0_wp * z + 1.0_wp ), markColor = 'blue' ) call ticks () call labels ( 'x' , 'y' , '' ) call subplot ( 2 , 2 , 4 ) call xylim ([ 0.0_wp , 1.0_wp ],[ 0.0_wp , 1.0_wp ]) call scatter ( x , y , c = z , s = ( 4.0_wp * z + 1.0_wp )) call ticks () call labels ( 'x' , 'y' , '' ) end subroutine testScatter subroutine testContour integer , parameter :: N = 100 real ( wp ), dimension ( N ) :: x , y real ( wp ), dimension ( N , N ) :: z integer :: i , j x = 2 0.0_wp * [( real ( i - 1 , wp ) / real ( N - 1 , wp ) , i = 1 , N )] - 1 0.0_wp y = 2 0.0_wp * [( real ( j - 1 , wp ) / real ( N - 1 , wp ) , j = 1 , N )] - 1 0.0_wp forall ( i = 1 : N , j = 1 : N ) z ( i , j ) = sin ( sqrt ( x ( i ) ** 2 + y ( j ) ** 2 ) ) / sqrt ( x ( i ) ** 2 + y ( j ) ** 2 ) end forall call figure () call subplot ( 1 , 1 , 1 , aspect = 1.0_wp ) call xylim ( mixval ( x ), mixval ( y )) call contourf ( x , y , z , 50 ) call contour ( x , y , z , 10 ) call colorbar ( z , 5 ) call ticks () call labels ( 'x' , 'y' , '' ) end subroutine testContour subroutine testLegend integer , parameter :: N = 20 real ( wp ), dimension ( N ) :: x , y character ( 32 ), dimension ( 3 , 7 ) :: series integer :: k x = [( real ( k - 1 , wp ) / real ( N - 1 , wp ) , k = 1 , N )] y = x ** 2 - 1.0_wp call figure () call subplot ( 1 , 1 , 1 ) call xylim ( mixval ( x ), mixval ( y )) call plot ( x , y , lineColor = 'red' , lineWidth = 2.0_wp , & & markStyle = '.' , markColor = 'cyan' , markSize = 2.0_wp ) call plot ( x , - 1.0_wp - y , lineColor = 'blue' , lineStyle = ':' , lineWidth = 2.0_wp , & & markStyle = '+' , markColor = 'green' , markSize = 1.0_wp ) ! [name,textColor,lineStyle,lineColor,markStyle,markColor] series ( 1 ,:) = [ character ( 32 ) :: 'f(x)=x#u2#d-1' , '' , '-' , 'r' , '.' , 'c' , '' ] series ( 2 ,:) = [ character ( 32 ) :: 'g(x)=-x#u2#d' , '' , ':' , 'b' , '+' , 'g' , '' ] series ( 3 ,:) = [ character ( 32 ) :: 'Box' , '' , '' , '' , '' , '' , 'r' ] call legend ( 'center left' , series ) call ticks () call labels ( 'x' , 'y' , '' ) end subroutine testLegend subroutine testQuiver integer , parameter :: N = 20 real ( wp ), dimension ( N ) :: x , y real ( wp ), dimension ( N , N ) :: u , v , m integer :: i , j x = 2 0.0_wp * [( real ( i - 1 , wp ) / real ( N - 1 , wp ) , i = 1 , N )] - 1 0.0_wp y = 2 0.0_wp * [( real ( j - 1 , wp ) / real ( N - 1 , wp ) , j = 1 , N )] - 1 0.0_wp forall ( i = 1 : N , j = 1 : N ) u ( i , j ) = - y ( j ) v ( i , j ) = x ( i ) m ( i , j ) = sqrt ( u ( i , j ) ** 2 + v ( i , j ) ** 2 ) end forall call figure () call subplot ( 1 , 1 , 1 , aspect = 1.0_wp ) call xylim ( mixval ( x ), mixval ( y )) call quiver ( x , y , u , v , c = m , s = m , scaling = 2.0_wp , lineWidth = 2.0_wp ) call colorbar ( m , 10 ) call ticks () call labels ( 'x' , 'y' , '' ) end subroutine testQuiver subroutine testBar integer , parameter :: N = 21 real ( wp ), dimension ( N ) :: x , y integer :: i x = 2.0_wp * PI * [( real ( i - 1 , wp ) / real ( N - 1 , wp ) , i = 1 , N )] - PI y = exp ( - x ** 2 ) call figure () call subplot ( 1 , 2 , 1 ) call xylim ( mixval ( x ) + [ - 0.1_wp , 0.1_wp ], mixval ( y ) + [ 0.0_wp , 0.1_wp ]) call bar ( x , y , c = y , relWidth = 1.0_wp ) call ticks () call labels ( 'x' , 'y' , '' ) call subplot ( 1 , 2 , 2 ) call xylim ( mixval ( y ) + [ 0.0_wp , 0.1_wp ], mixval ( x ) + [ - 0.1_wp , 0.1_wp ]) call barh ( x , y , fillColor = 'r' , relWidth = 1.0_wp ) call ticks () call labels ( 'x' , 'y' , '' ) end subroutine testBar subroutine testFillBetween integer , parameter :: N = 51 real ( wp ), dimension ( N ) :: x , y1 , y2 integer :: k x = 6.0_wp * [( real ( k - 1 , wp ) / real ( N - 1 , wp ) , k = 1 , N )] - 3.0_wp y1 = x ** 2 - 1.0_wp y2 = x ** 3 - 1.0_wp call figure () call subplot ( 1 , 1 , 1 ) call xylim ( mixval ( x ), mixval ([ y1 , y2 ])) call fillBetween ( x , y1 , y2 , fillColor = 'c' , fillPattern = '\\',lineWidth=2.0_wp) call plot(x,y1,lineColor=' k ',lineWidth=3.0_wp) call plot(x,y2,lineColor=' k ',lineWidth=3.0_wp) call ticks(color=' b ',lineWidth=3.0_wp) call labels(' x ',' y ',' f ( x ) = x # u2 # d - 1 ',color=' r ' ) end subroutine testFillBetween end program main_prg © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"sourcefile/main.f90.html","title":"main.f90 – PlPlotLib"},{"text":"printTypes Subroutine Source File kinds.f90 kinds_mod printTypes All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine printTypes() Arguments None Description Print the integer kinds for each real type © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/printtypes.html","title":"printTypes – PlPlotLib"},{"text":"mixval Function Source File plplot.f90 plplot_mod mixval All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  function mixval(x) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x Array to find extrema in Return Value real(kind=wp),\n    dimension(2) Description Return [hi,low] for an array\n FIXME: Implement as generic function for arrays 1d,2d,3d © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/mixval.html","title":"mixval – PlPlotLib"},{"text":"startsWith Function Source File plplot.f90 plplot_mod startsWith Variables k All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  function startsWith(text, str) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: text Text to search character(len=*), intent(in) :: str String to look for Return Value logical Description Test if text starts with str Variables Type Visibility Attributes Name Initial integer, public :: k © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/startswith.html","title":"startsWith – PlPlotLib"},{"text":"endsWith Function Source File plplot.f90 plplot_mod endsWith Variables k All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  function endsWith(text, str) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: text Text to search character(len=*), intent(in) :: str String to look for Return Value logical Description Test if text ends with str Variables Type Visibility Attributes Name Initial integer, public :: k © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/endswith.html","title":"endsWith – PlPlotLib"},{"text":"getLineStyleCode Function Source File plplot.f90 plplot_mod getLineStyleCode All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  function getLineStyleCode(style) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: style Style desired Return Value integer Description Return the code for a line style © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/getlinestylecode.html","title":"getLineStyleCode – PlPlotLib"},{"text":"getSymbolCode Function Source File plplot.f90 plplot_mod getSymbolCode All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  function getSymbolCode(style) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: style Style desired Return Value character(len=32) Description Return the code for a symbol style © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/getsymbolcode.html","title":"getSymbolCode – PlPlotLib"},{"text":"getFillCode Function Source File plplot.f90 plplot_mod getFillCode All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  function getFillCode(style) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: style Return Value integer © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/getfillcode.html","title":"getFillCode – PlPlotLib"},{"text":"getColorCode Function Source File plplot.f90 plplot_mod getColorCode All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  function getColorCode(color) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: color Return Value integer © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/getcolorcode.html","title":"getColorCode – PlPlotLib"},{"text":"figure Subroutine Source File plplot.f90 plplot_mod figure All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine figure() Arguments None Description Create a new figure © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/figure.html","title":"figure – PlPlotLib"},{"text":"subplot Subroutine Source File plplot.f90 plplot_mod subplot All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine subplot(ny, nx, i, aspect) Arguments Type Intent Optional Attributes Name integer, intent(in) :: ny Number of subplot rows integer, intent(in) :: nx Number of subplot columns integer, intent(in) :: i Subplot to use real(kind=wp), intent(in), optional :: aspect Aspect ratio of the axes Description Create a set of axes on a figure © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/subplot.html","title":"subplot – PlPlotLib"},{"text":"xylim Subroutine Source File plplot.f90 plplot_mod xylim All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine xylim(xb, yb) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(2) :: xb x-range of plot real(kind=wp), intent(in), dimension(2) :: yb y-range of plot Description Set the x and y ranges of the plot © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/xylim.html","title":"xylim – PlPlotLib"},{"text":"ticks Subroutine Source File plplot.f90 plplot_mod ticks Variables dxl dyl xopts yopts All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine ticks(dx, dy, logx, logy, color, linewidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), optional :: dx Spacing between ticks on x-axis real(kind=wp), intent(in), optional :: dy Spacing between ticks on y-axis logical, intent(in), optional :: logx Flag for log-ticks and labels on x-axis logical, intent(in), optional :: logy Flag for log-ticks and labels on y-axis character(len=*), intent(in), optional :: color Color code for ticks, box, and labels real(kind=wp), intent(inout), optional :: linewidth Line width for ticks and box Description Set the ticks for the axes Variables Type Visibility Attributes Name Initial real(kind=plflt), public :: dxl real(kind=plflt), public :: dyl character(len=10), public :: xopts character(len=10), public :: yopts © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/ticks.html","title":"ticks – PlPlotLib"},{"text":"labels Subroutine Source File plplot.f90 plplot_mod labels All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine labels(xLabel, yLabel, plotLabel, color) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: xLabel Label for x-axis character(len=*), intent(in) :: yLabel Label for x-axis character(len=*), intent(in) :: plotLabel Label entire plot character(len=*), intent(in), optional :: color Description Set x,y and plot labels © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/labels.html","title":"labels – PlPlotLib"},{"text":"colorbar Subroutine Source File plplot.f90 plplot_mod colorbar Variables values labels fill_width cont_width cont_color colorbar_width colorbar_height k All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine colorbar(z, N, leftLabel, rightLabel) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:,:) :: z Data used for levels computation integer, intent(in) :: N Number of levels to compute character(len=*), intent(in), optional :: leftLabel Label for left side of colorbar character(len=*), intent(in), optional :: rightLabel Label for right side of colorbar Description Add a colorbar to the top of the plot Variables Type Visibility Attributes Name Initial real(kind=plflt), public, dimension(:,:), allocatable :: values character(len=64), public, dimension(2) :: labels real(kind=plflt), public :: fill_width real(kind=plflt), public :: cont_width integer, public :: cont_color real(kind=plflt), public :: colorbar_width real(kind=plflt), public :: colorbar_height integer, public :: k © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/colorbar.html","title":"colorbar – PlPlotLib"},{"text":"legend Subroutine Source File plplot.f90 plplot_mod legend Variables width height xoff yoff plotWidth opt cornerl bg_color bb_color bb_style lncol lnrow opts lwidths mscales mcounts text_colors text_offset text_scale text_spacing text_justification box_colors box_patterns box_scales box_line_widths line_colors line_styles mark_colors mark_styles k Functions getCorner Subroutines doLegendBox doText doBoxes doLines doMarkers All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine legend(corner, series, lineWidths, markScales, markCounts, ncol) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: corner Corner for legend character(len=*), intent(in), dimension(:,:) :: series Data series in rows\n [name,textColor,lineStyle,lineColor,markStyle,markColor,boxColor] real(kind=wp), intent(in), optional dimension(:) :: lineWidths Line widths for the plots real(kind=wp), intent(in), optional dimension(:) :: markScales Marker sizes for the plots integer, intent(in), optional dimension(:) :: markCounts Marker counts for the plots integer, intent(in), optional :: ncol Number of columns Description Create legend for plot data. FIXME: Text sizing should be modifiable Variables Type Visibility Attributes Name Initial real(kind=plflt), public :: width real(kind=plflt), public :: height real(kind=plflt), public :: xoff real(kind=plflt), public :: yoff real(kind=plflt), public :: plotWidth integer, public :: opt integer, public :: cornerl integer, public :: bg_color integer, public :: bb_color integer, public :: bb_style integer, public :: lncol integer, public :: lnrow integer, public, dimension(size(series,1)) :: opts real(kind=plflt), public, dimension(size(series,1)) :: lwidths real(kind=plflt), public, dimension(size(series,1)) :: mscales integer, public, dimension(size(series,1)) :: mcounts integer, public, dimension(size(series,1)) :: text_colors real(kind=plflt), public :: text_offset real(kind=plflt), public :: text_scale real(kind=plflt), public :: text_spacing real(kind=plflt), public :: text_justification integer, public, dimension(size(series,1)) :: box_colors integer, public, dimension(size(series,1)) :: box_patterns real(kind=plflt), public, dimension(size(series,1)) :: box_scales real(kind=plflt), public, dimension(size(series,1)) :: box_line_widths integer, public, dimension(size(series,1)) :: line_colors integer, public, dimension(size(series,1)) :: line_styles integer, public, dimension(size(series,1)) :: mark_colors character(len=64), public, dimension(size(series,1)) :: mark_styles integer, public :: k Functions function getCorner (text) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: text Return Value integer Subroutines subroutine doLegendBox () Arguments None subroutine doText () Arguments None subroutine doBoxes () Arguments None subroutine doLines () Arguments None subroutine doMarkers () Arguments None © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/legend.html","title":"legend – PlPlotLib"},{"text":"scatter Subroutine Source File plplot.f90 plplot_mod scatter Variables xl yl cb code k All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine scatter(x, y, c, s, markColor, markStyle, markSize) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-coordinates of data real(kind=wp), intent(in), dimension(:) :: y y-coordinates of data real(kind=wp), intent(in), optional dimension(:) :: c Data for smooth coloring real(kind=wp), intent(in), optional dimension(:) :: s Data for marker scaling character(len=*), intent(in), optional :: markColor Color of markers; overridden by z character(len=*), intent(in), optional :: markStyle Style of markers real(kind=wp), intent(in), optional :: markSize Size of markers Description Create scatter plot of data. Variables Type Visibility Attributes Name Initial real(kind=plflt), public, dimension(:), allocatable :: xl real(kind=plflt), public, dimension(:), allocatable :: yl real(kind=plflt), public, dimension(:), allocatable :: cb character(len=32), public :: code integer, public :: k © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/scatter.html","title":"scatter – PlPlotLib"},{"text":"plot Subroutine Source File plplot.f90 plplot_mod plot Variables xl yl code k All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine plot(x, y, lineColor, lineStyle, lineWidth, markColor, markStyle, markSize) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-data for plot real(kind=wp), intent(in), dimension(:) :: y y-data for plot character(len=*), intent(in), optional :: lineColor Color of line character(len=*), intent(in), optional :: lineStyle Style of line; '' for no line real(kind=wp), intent(in), optional :: lineWidth Width of line character(len=*), intent(in), optional :: markColor Color of markers, if any character(len=*), intent(in), optional :: markStyle Style of markers; '' or absent for none real(kind=wp), intent(in), optional :: markSize Size of markers, if any Description Plot data using lines and or markers. Variables Type Visibility Attributes Name Initial real(kind=plflt), public, dimension(:), allocatable :: xl real(kind=plflt), public, dimension(:), allocatable :: yl character(len=32), public :: code integer, public :: k © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/plot.html","title":"plot – PlPlotLib"},{"text":"contour Subroutine Source File plplot.f90 plplot_mod contour Variables xl yl zl edge Nl k All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine contour(x, y, z, N, lineColor, lineStyle, lineWidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-coordinates of data real(kind=wp), intent(in), dimension(:) :: y y-coordinates of data real(kind=wp), intent(in), dimension(:,:) :: z Data for contouring integer, intent(in), optional :: N Number of levels to use in contour character(len=*), intent(in), optional :: lineColor Color of contour lines character(len=*), intent(in), optional :: lineStyle Style of contour lines real(kind=wp), intent(inout), optional :: lineWidth Width of contour lines Description Plot contour lines. Variables Type Visibility Attributes Name Initial real(kind=plflt), public, dimension(:), allocatable :: xl real(kind=plflt), public, dimension(:), allocatable :: yl real(kind=plflt), public, dimension(:,:), allocatable :: zl real(kind=plflt), public, dimension(:), allocatable :: edge integer, public :: Nl integer, public :: k © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/contour.html","title":"contour – PlPlotLib"},{"text":"contourf Subroutine Source File plplot.f90 plplot_mod contourf Variables xl yl zl edge defined fill_width cont_width cont_color Nl k All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine contourf(x, y, z, N) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-coordinates of data real(kind=wp), intent(in), dimension(:) :: y y-coordinates of data real(kind=wp), intent(in), dimension(:,:) :: z Data for contouring integer, intent(in), optional :: N Number of levels to use in contour Description Plot filled contours. Variables Type Visibility Attributes Name Initial real(kind=plflt), public, dimension(:), allocatable :: xl real(kind=plflt), public, dimension(:), allocatable :: yl real(kind=plflt), public, dimension(:,:), allocatable :: zl real(kind=plflt), public, dimension(:), allocatable :: edge character(len=1), public :: defined real(kind=plflt), public :: fill_width real(kind=plflt), public :: cont_width integer, public :: cont_color integer, public :: Nl integer, public :: k © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/contourf.html","title":"contourf – PlPlotLib"},{"text":"quiver Subroutine Source File plplot.f90 plplot_mod quiver Variables xl yl ul vl sl xb yb sb cb d scalingl scl mag i j All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine quiver(x, y, u, v, s, c, scaling, lineColor, lineStyle, lineWidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-positions of vectors real(kind=wp), intent(in), dimension(:) :: y y-positions of vectors real(kind=wp), intent(in), dimension(:,:) :: u u-components of vectors real(kind=wp), intent(in), dimension(:,:) :: v v-components of vectors real(kind=wp), intent(in), optional dimension(:,:) :: s Scale of vectors real(kind=wp), intent(in), optional dimension(:,:) :: c Color values for vectors real(kind=wp), intent(in), optional :: scaling Scaling of vectors\n < 0 = Automatic, then scaled\n   0 = Automatic 0 = Directly scaled character(len=*), intent(in), optional :: lineColor Color of vectors character(len=*), intent(in), optional :: lineStyle Style of vectors' lines real(kind=wp), intent(inout), optional :: lineWidth Width of vectors' lines Description Plot vectors. Variables Type Visibility Attributes Name Initial real(kind=plflt), public, dimension(:), allocatable :: xl real(kind=plflt), public, dimension(:), allocatable :: yl real(kind=plflt), public, dimension(:,:), allocatable :: ul real(kind=plflt), public, dimension(:,:), allocatable :: vl real(kind=plflt), public, dimension(:,:), allocatable :: sl real(kind=plflt), public, dimension(2) :: xb real(kind=plflt), public, dimension(2) :: yb real(kind=plflt), public, dimension(2) :: sb real(kind=plflt), public, dimension(2) :: cb real(kind=plflt), public, dimension(2) :: d real(kind=plflt), public :: scalingl real(kind=plflt), public :: scl real(kind=plflt), public :: mag integer, public :: i integer, public :: j © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/quiver.html","title":"quiver – PlPlotLib"},{"text":"bar Subroutine Source File plplot.f90 plplot_mod bar Variables xl yl cb dx dxs k All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine bar(x, y, c, relWidth, fillColor, fillPattern, lineColor, lineWidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-positions of the bars' centers real(kind=wp), intent(in), dimension(:) :: y y-positions of the bars' tops real(kind=wp), intent(in), optional dimension(:) :: c Color scale for bars real(kind=wp), intent(in), optional :: relWidth Relative width of bars character(len=*), intent(in), optional :: fillColor Color of bar fills character(len=*), intent(in), optional :: fillPattern Pattern of bar fills character(len=*), intent(in), optional :: lineColor Color of lines around bars real(kind=wp), intent(inout), optional :: lineWidth Width of lines around bars Description Create a bar graph. Variables Type Visibility Attributes Name Initial real(kind=plflt), public, dimension(4) :: xl real(kind=plflt), public, dimension(4) :: yl real(kind=plflt), public, dimension(2) :: cb real(kind=plflt), public :: dx real(kind=plflt), public :: dxs integer, public :: k © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/bar.html","title":"bar – PlPlotLib"},{"text":"barh Subroutine Source File plplot.f90 plplot_mod barh Variables xl yl cb dy dys k All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine barh(y, x, c, relWidth, fillColor, fillPattern, lineColor, lineWidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: y y-positions of the bars' centers real(kind=wp), intent(in), dimension(:) :: x x-positions of the bars' tops real(kind=wp), intent(in), optional dimension(:) :: c Color scale for bars real(kind=wp), intent(in), optional :: relWidth Relative width of bars character(len=*), intent(in), optional :: fillColor Color of bar fills character(len=*), intent(in), optional :: fillPattern Pattern of bar fills character(len=*), intent(in), optional :: lineColor Color of lines around bars real(kind=wp), intent(inout), optional :: lineWidth Width of lines around bars Description Create a bar graph. Variables Type Visibility Attributes Name Initial real(kind=plflt), public, dimension(4) :: xl real(kind=plflt), public, dimension(4) :: yl real(kind=plflt), public, dimension(2) :: cb real(kind=plflt), public :: dy real(kind=plflt), public :: dys integer, public :: k © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/barh.html","title":"barh – PlPlotLib"},{"text":"fillBetween Subroutine Source File plplot.f90 plplot_mod fillBetween Variables xl y1l y0l N All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine fillBetween(x, y1, y0, fillColor, fillPattern, lineWidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x real(kind=wp), intent(in), dimension(:) :: y1 real(kind=wp), intent(in), optional dimension(:) :: y0 character(len=*), intent(in), optional :: fillColor character(len=*), intent(in), optional :: fillPattern real(kind=wp), intent(in), optional :: lineWidth Description Fill space between two lines Variables Type Visibility Attributes Name Initial real(kind=plflt), public, dimension(:), allocatable :: xl real(kind=plflt), public, dimension(:), allocatable :: y1l real(kind=plflt), public, dimension(:), allocatable :: y0l integer, public :: N © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/fillbetween.html","title":"fillBetween – PlPlotLib"},{"text":"resetPen Subroutine Source File plplot.f90 plplot_mod resetPen All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine resetPen() Arguments None Description Reset pen to default state © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/resetpen.html","title":"resetPen – PlPlotLib"},{"text":"setLineWidth Subroutine Source File plplot.f90 plplot_mod setLineWidth All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine setLineWidth(lineWidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: lineWidth © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/setlinewidth.html","title":"setLineWidth – PlPlotLib"},{"text":"setLineStyle Subroutine Source File plplot.f90 plplot_mod setLineStyle All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine setLineStyle(style) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: style Style to set Description Set the current pen line style © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/setlinestyle.html","title":"setLineStyle – PlPlotLib"},{"text":"setFillPattern Subroutine Source File plplot.f90 plplot_mod setFillPattern All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine setFillPattern(style) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: style © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/setfillpattern.html","title":"setFillPattern – PlPlotLib"},{"text":"setColor Subroutine Source File plplot.f90 plplot_mod setColor All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine setColor(color) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: color Name of color to set Description Set the current pen color © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/setcolor.html","title":"setColor – PlPlotLib"},{"text":"setup Subroutine Source File plplot.f90 plplot_mod setup All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine setup(device, fileName, fontScaling, whiteOnBlack, colormap) Arguments Type Intent Optional Attributes Name character(len=*), intent(in), optional :: device Output device to use character(len=*), intent(in), optional :: fileName Name of file(s) to write to\n %n will be replaced with the figure number real(kind=wp), intent(in), optional :: fontScaling Font scaling relative to default value logical, intent(in), optional :: whiteOnBlack character(len=*), intent(in), optional :: colormap Colormap to use Description Setup PlPlot library, optionally overriding defaults\n FIXME © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/setup.html","title":"setup – PlPlotLib"},{"text":"show Subroutine Source File plplot.f90 plplot_mod show All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine show() Arguments None Description Show the plots end finialize the PlPlot library © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/show.html","title":"show – PlPlotLib"},{"text":"setIndexedColors Subroutine Source File plplot.f90 plplot_mod setIndexedColors Variables rgb All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine setIndexedColors() Arguments None Description Setup the indexed colors Variables Type Visibility Attributes Name Initial integer, public, dimension(8,3) :: rgb © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/setindexedcolors.html","title":"setIndexedColors – PlPlotLib"},{"text":"setColormap Subroutine Source File plplot.f90 plplot_mod setColormap Variables i h s v All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim public  subroutine setColormap(colormap) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: colormap Name of colormap to use Description Set the continuous colormap Variables Type Visibility Attributes Name Initial real(kind=plflt), public, dimension(:), allocatable :: i real(kind=plflt), public, dimension(:), allocatable :: h real(kind=plflt), public, dimension(:), allocatable :: s real(kind=plflt), public, dimension(:), allocatable :: v © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/setcolormap.html","title":"setColormap – PlPlotLib"},{"text":"testPlot Subroutine Source File main.f90 main_prg testPlot Variables N x y k All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim subroutine testPlot() Arguments None Variables Type Visibility Attributes Name Initial integer, public, parameter :: N = 20 real(kind=wp), public, dimension(N) :: x real(kind=wp), public, dimension(N) :: y integer, public :: k © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/testplot.html","title":"testPlot – PlPlotLib"},{"text":"testScatter Subroutine Source File main.f90 main_prg testScatter Variables N x y z All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim subroutine testScatter() Arguments None Variables Type Visibility Attributes Name Initial integer, public, parameter :: N = 100 real(kind=wp), public, dimension(N) :: x real(kind=wp), public, dimension(N) :: y real(kind=wp), public, dimension(N) :: z © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/testscatter.html","title":"testScatter – PlPlotLib"},{"text":"testContour Subroutine Source File main.f90 main_prg testContour Variables N x y z i j All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim subroutine testContour() Arguments None Variables Type Visibility Attributes Name Initial integer, public, parameter :: N = 100 real(kind=wp), public, dimension(N) :: x real(kind=wp), public, dimension(N) :: y real(kind=wp), public, dimension(N,N) :: z integer, public :: i integer, public :: j © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/testcontour.html","title":"testContour – PlPlotLib"},{"text":"testLegend Subroutine Source File main.f90 main_prg testLegend Variables N x y series k All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim subroutine testLegend() Arguments None Variables Type Visibility Attributes Name Initial integer, public, parameter :: N = 20 real(kind=wp), public, dimension(N) :: x real(kind=wp), public, dimension(N) :: y character(len=32), public, dimension(3,7) :: series integer, public :: k © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/testlegend.html","title":"testLegend – PlPlotLib"},{"text":"testQuiver Subroutine Source File main.f90 main_prg testQuiver Variables N x y u v m i j All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim subroutine testQuiver() Arguments None Variables Type Visibility Attributes Name Initial integer, public, parameter :: N = 20 real(kind=wp), public, dimension(N) :: x real(kind=wp), public, dimension(N) :: y real(kind=wp), public, dimension(N,N) :: u real(kind=wp), public, dimension(N,N) :: v real(kind=wp), public, dimension(N,N) :: m integer, public :: i integer, public :: j © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/testquiver.html","title":"testQuiver – PlPlotLib"},{"text":"testBar Subroutine Source File main.f90 main_prg testBar Variables N x y i All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim subroutine testBar() Arguments None Variables Type Visibility Attributes Name Initial integer, public, parameter :: N = 21 real(kind=wp), public, dimension(N) :: x real(kind=wp), public, dimension(N) :: y integer, public :: i © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/testbar.html","title":"testBar – PlPlotLib"},{"text":"testFillBetween Subroutine Source File main.f90 main_prg testFillBetween Variables N x y1 y2 k All Procedures bar barh colorbar contour contourf endsWith figure fillBetween getColorCode getFillCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setFillPattern setIndexedColors setLineStyle setLineWidth setup show startsWith subplot testBar testContour testFillBetween testLegend testPlot testQuiver testScatter ticks xylim subroutine testFillBetween() Arguments None Variables Type Visibility Attributes Name Initial integer, public, parameter :: N = 51 real(kind=wp), public, dimension(N) :: x real(kind=wp), public, dimension(N) :: y1 real(kind=wp), public, dimension(N) :: y2 integer, public :: k © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/testfillbetween.html","title":"testFillBetween – PlPlotLib"},{"text":"kinds_mod Module Source File kinds.f90 kinds_mod Variables wp PI E Subroutines printTypes All Modules kinds_mod plplot_mod Module to manage kinds for the program Variables Type Visibility Attributes Name Initial integer, public, parameter :: wp = dp Set working precision to double real(kind=wp), public, parameter :: PI = 4.0_wp*atan(1.0_wp) Archimedes' constant real(kind=wp), public, parameter :: E = exp(1.0_wp) Euler's constant Subroutines public  subroutine printTypes () Arguments None Description Print the integer kinds for each real type © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"module/kinds_mod.html","title":"kinds_mod – PlPlotLib"},{"text":"plplot_mod Module Source File plplot.f90 plplot_mod Variables default_dev isSetup didShow fontScale blackOnWhite Functions mixval startsWith endsWith getLineStyleCode getSymbolCode getFillCode getColorCode Subroutines figure subplot xylim ticks labels colorbar legend scatter plot contour contourf quiver bar barh fillBetween resetPen setLineWidth setLineStyle setFillPattern setColor setup show setIndexedColors setColormap All Modules kinds_mod plplot_mod Uses: kinds_mod plplot Wrapper module for plplot to give it a more matplotlib like personality Variables Type Visibility Attributes Name Initial character(len=*), public, parameter :: default_dev = 'qtwidget' Default output device logical, public :: isSetup = .false. Flag for library setup status logical, public :: didShow = .false. Flag for library display status real(kind=plflt), public :: fontScale = 1.0_plflt Font scale factor to resetPen logical, public :: blackOnWhite = .true. Functions public  function mixval (x) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x Array to find extrema in Return Value real(kind=wp),\n  dimension(2) Description Return [hi,low] for an array\n FIXME: Implement as generic function for arrays 1d,2d,3d public  function startsWith (text, str) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: text Text to search character(len=*), intent(in) :: str String to look for Return Value logical Description Test if text starts with str public  function endsWith (text, str) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: text Text to search character(len=*), intent(in) :: str String to look for Return Value logical Description Test if text ends with str public  function getLineStyleCode (style) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: style Style desired Return Value integer Description Return the code for a line style public  function getSymbolCode (style) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: style Style desired Return Value character(len=32) Description Return the code for a symbol style public  function getFillCode (style) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: style Return Value integer public  function getColorCode (color) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: color Return Value integer Subroutines public  subroutine figure () Arguments None Description Create a new figure public  subroutine subplot (ny, nx, i, aspect) Arguments Type Intent Optional Attributes Name integer, intent(in) :: ny Number of subplot rows integer, intent(in) :: nx Number of subplot columns integer, intent(in) :: i Subplot to use real(kind=wp), intent(in), optional :: aspect Aspect ratio of the axes Description Create a set of axes on a figure public  subroutine xylim (xb, yb) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(2) :: xb x-range of plot real(kind=wp), intent(in), dimension(2) :: yb y-range of plot Description Set the x and y ranges of the plot public  subroutine ticks (dx, dy, logx, logy, color, linewidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), optional :: dx Spacing between ticks on x-axis real(kind=wp), intent(in), optional :: dy Spacing between ticks on y-axis logical, intent(in), optional :: logx Flag for log-ticks and labels on x-axis logical, intent(in), optional :: logy Flag for log-ticks and labels on y-axis character(len=*), intent(in), optional :: color Color code for ticks, box, and labels real(kind=wp), intent(inout), optional :: linewidth Line width for ticks and box Description Set the ticks for the axes public  subroutine labels (xLabel, yLabel, plotLabel, color) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: xLabel Label for x-axis character(len=*), intent(in) :: yLabel Label for x-axis character(len=*), intent(in) :: plotLabel Label entire plot character(len=*), intent(in), optional :: color Description Set x,y and plot labels public  subroutine colorbar (z, N, leftLabel, rightLabel) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:,:) :: z Data used for levels computation integer, intent(in) :: N Number of levels to compute character(len=*), intent(in), optional :: leftLabel Label for left side of colorbar character(len=*), intent(in), optional :: rightLabel Label for right side of colorbar Description Add a colorbar to the top of the plot public  subroutine legend (corner, series, lineWidths, markScales, markCounts, ncol) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: corner Corner for legend character(len=*), intent(in), dimension(:,:) :: series Data series in rows\n [name,textColor,lineStyle,lineColor,markStyle,markColor,boxColor] real(kind=wp), intent(in), optional dimension(:) :: lineWidths Line widths for the plots real(kind=wp), intent(in), optional dimension(:) :: markScales Marker sizes for the plots integer, intent(in), optional dimension(:) :: markCounts Marker counts for the plots integer, intent(in), optional :: ncol Number of columns Description Create legend for plot data. public  subroutine scatter (x, y, c, s, markColor, markStyle, markSize) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-coordinates of data real(kind=wp), intent(in), dimension(:) :: y y-coordinates of data real(kind=wp), intent(in), optional dimension(:) :: c Data for smooth coloring real(kind=wp), intent(in), optional dimension(:) :: s Data for marker scaling character(len=*), intent(in), optional :: markColor Color of markers; overridden by z character(len=*), intent(in), optional :: markStyle Style of markers real(kind=wp), intent(in), optional :: markSize Size of markers Description Create scatter plot of data. public  subroutine plot (x, y, lineColor, lineStyle, lineWidth, markColor, markStyle, markSize) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-data for plot real(kind=wp), intent(in), dimension(:) :: y y-data for plot character(len=*), intent(in), optional :: lineColor Color of line character(len=*), intent(in), optional :: lineStyle Style of line; '' for no line real(kind=wp), intent(in), optional :: lineWidth Width of line character(len=*), intent(in), optional :: markColor Color of markers, if any character(len=*), intent(in), optional :: markStyle Style of markers; '' or absent for none real(kind=wp), intent(in), optional :: markSize Size of markers, if any Description Plot data using lines and or markers. public  subroutine contour (x, y, z, N, lineColor, lineStyle, lineWidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-coordinates of data real(kind=wp), intent(in), dimension(:) :: y y-coordinates of data real(kind=wp), intent(in), dimension(:,:) :: z Data for contouring integer, intent(in), optional :: N Number of levels to use in contour character(len=*), intent(in), optional :: lineColor Color of contour lines character(len=*), intent(in), optional :: lineStyle Style of contour lines real(kind=wp), intent(inout), optional :: lineWidth Width of contour lines Description Plot contour lines. public  subroutine contourf (x, y, z, N) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-coordinates of data real(kind=wp), intent(in), dimension(:) :: y y-coordinates of data real(kind=wp), intent(in), dimension(:,:) :: z Data for contouring integer, intent(in), optional :: N Number of levels to use in contour Description Plot filled contours. public  subroutine quiver (x, y, u, v, s, c, scaling, lineColor, lineStyle, lineWidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-positions of vectors real(kind=wp), intent(in), dimension(:) :: y y-positions of vectors real(kind=wp), intent(in), dimension(:,:) :: u u-components of vectors real(kind=wp), intent(in), dimension(:,:) :: v v-components of vectors real(kind=wp), intent(in), optional dimension(:,:) :: s Scale of vectors real(kind=wp), intent(in), optional dimension(:,:) :: c Color values for vectors real(kind=wp), intent(in), optional :: scaling Scaling of vectors\n < 0 = Automatic, then scaled\n   0 = Automatic character(len=*), intent(in), optional :: lineColor Color of vectors character(len=*), intent(in), optional :: lineStyle Style of vectors' lines real(kind=wp), intent(inout), optional :: lineWidth Width of vectors' lines Description Plot vectors. public  subroutine bar (x, y, c, relWidth, fillColor, fillPattern, lineColor, lineWidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-positions of the bars' centers real(kind=wp), intent(in), dimension(:) :: y y-positions of the bars' tops real(kind=wp), intent(in), optional dimension(:) :: c Color scale for bars real(kind=wp), intent(in), optional :: relWidth Relative width of bars character(len=*), intent(in), optional :: fillColor Color of bar fills character(len=*), intent(in), optional :: fillPattern Pattern of bar fills character(len=*), intent(in), optional :: lineColor Color of lines around bars real(kind=wp), intent(inout), optional :: lineWidth Width of lines around bars Description Create a bar graph. public  subroutine barh (y, x, c, relWidth, fillColor, fillPattern, lineColor, lineWidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: y y-positions of the bars' centers real(kind=wp), intent(in), dimension(:) :: x x-positions of the bars' tops real(kind=wp), intent(in), optional dimension(:) :: c Color scale for bars real(kind=wp), intent(in), optional :: relWidth Relative width of bars character(len=*), intent(in), optional :: fillColor Color of bar fills character(len=*), intent(in), optional :: fillPattern Pattern of bar fills character(len=*), intent(in), optional :: lineColor Color of lines around bars real(kind=wp), intent(inout), optional :: lineWidth Width of lines around bars Description Create a bar graph. public  subroutine fillBetween (x, y1, y0, fillColor, fillPattern, lineWidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x real(kind=wp), intent(in), dimension(:) :: y1 real(kind=wp), intent(in), optional dimension(:) :: y0 character(len=*), intent(in), optional :: fillColor character(len=*), intent(in), optional :: fillPattern real(kind=wp), intent(in), optional :: lineWidth Description Fill space between two lines public  subroutine resetPen () Arguments None Description Reset pen to default state public  subroutine setLineWidth (lineWidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in) :: lineWidth public  subroutine setLineStyle (style) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: style Style to set Description Set the current pen line style public  subroutine setFillPattern (style) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: style public  subroutine setColor (color) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: color Name of color to set Description Set the current pen color public  subroutine setup (device, fileName, fontScaling, whiteOnBlack, colormap) Arguments Type Intent Optional Attributes Name character(len=*), intent(in), optional :: device Output device to use character(len=*), intent(in), optional :: fileName Name of file(s) to write to\n %n will be replaced with the figure number real(kind=wp), intent(in), optional :: fontScaling Font scaling relative to default value logical, intent(in), optional :: whiteOnBlack character(len=*), intent(in), optional :: colormap Colormap to use Description Setup PlPlot library, optionally overriding defaults\n FIXME public  subroutine show () Arguments None Description Show the plots end finialize the PlPlot library public  subroutine setIndexedColors () Arguments None Description Setup the indexed colors public  subroutine setColormap (colormap) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: colormap Name of colormap to use Description Set the continuous colormap © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"module/plplot_mod.html","title":"plplot_mod – PlPlotLib"},{"text":"main_prg Program Source File main.f90 main_prg Subroutines testPlot testScatter testContour testLegend testQuiver testBar testFillBetween All Programs main_prg Uses: kinds_mod plplot_mod Subroutines subroutine testPlot () Arguments None subroutine testScatter () Arguments None subroutine testContour () Arguments None subroutine testLegend () Arguments None subroutine testQuiver () Arguments None subroutine testBar () Arguments None subroutine testFillBetween () Arguments None © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"program/main_prg.html","title":"main_prg – PlPlotLib"},{"text":"README README ToDo : Add content here. © 2015 PlPlotLib was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"page/index.html","title":"README – PlPlotLib"}]}
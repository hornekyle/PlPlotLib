var tipuesearch = {"pages":[{"text":"PlPlot Wrapper Developer Info Dr. Kyle Horne Assistant Professor, Mechanical and Energy Engineering, University of North Texas","tags":"home","loc":"index.html","title":" PlPlot Wrapper "},{"text":"Procedures Procedure Location Procedure Type Description colorbar plplot_mod Subroutine Add a colorbar to the top of the plot contour plplot_mod Subroutine Plot contour lines contourf plplot_mod Subroutine Plot filled contours endsWith plplot_mod Function figure plplot_mod Subroutine Create a new figure getColorCode plplot_mod Function getLineStyleCode plplot_mod Function getSymbolCode plplot_mod Function Return the code for a symbol style labels plplot_mod Subroutine Set x,y and plot labels legend plplot_mod Subroutine Create legend for plot data\n FIXME: Text sizing should be modifiable mixval plplot_mod Function plot plplot_mod Subroutine Plot data using lines and or markers printTypes kinds_mod Subroutine Print the integer kinds for each real type quiver plplot_mod Subroutine Plot vectors resetPen plplot_mod Subroutine Reset pen to default state scatter plplot_mod Subroutine Create scatter plot of data setColor plplot_mod Subroutine Set the current pen color setColormap plplot_mod Subroutine Set the continuous colormap setIndexedColors plplot_mod Subroutine Setup the indexed colors setLineStyle plplot_mod Subroutine Set the current pen line style setup plplot_mod Subroutine Setup PlPlot library, optionally overriding defaults show plplot_mod Subroutine Show the plots end finialize the PlPlot library startsWith plplot_mod Function subplot plplot_mod Subroutine Create a set of axes on a figure testContour main_prg Subroutine testLegend main_prg Subroutine testPlot main_prg Subroutine testScatter main_prg Subroutine ticks plplot_mod Subroutine Set the ticks for the axes xylim plplot_mod Subroutine Set the x and y ranges of the plot","tags":"list procedures","loc":"lists/procedures.html","title":"\nAll Procedures – PlPlot Wrapper\n"},{"text":"Source Files File Description kinds.f90 main.f90 plplot.f90","tags":"list files","loc":"lists/files.html","title":"\nAll Files – PlPlot Wrapper\n"},{"text":"Modules Module Source File Description kinds_mod kinds.f90 Module to manage kinds for the program plplot_mod plplot.f90 Wrapper module for plplot to give it a more matplotlib like personality","tags":"list modules","loc":"lists/modules.html","title":"\nAll Modules – PlPlot Wrapper\n"},{"text":"kinds.f90 Source File Source File kinds.f90 Modules kinds_mod All Source Files kinds.f90 main.f90 plplot.f90 module kinds_mod !! Module to manage kinds for the program implicit none private !==============! != Real Kinds =! !==============! integer , parameter :: sp = selected_real_kind ( 6 ) !! Single precision integer , parameter :: dp = selected_real_kind ( 15 ) !! Double precision integer , parameter :: ep = selected_real_kind ( 18 ) !! Extended precision integer , parameter :: qp = selected_real_kind ( 32 ) !! Quad precision integer , parameter :: wp = dp !! Set working precision to double !==================! != Math Constants =! !==================! real ( wp ), parameter :: PI = 4.0_wp * atan ( 1.0_wp ) !! Archimedes' constant real ( wp ), parameter :: E = exp ( 1.0_wp ) !! Euler's constant !===========! != Exports =! !===========! public :: wp public :: PI , E public :: printTypes contains subroutine printTypes !! Print the integer kinds for each real type write ( * , * ) 'sp: ' , sp write ( * , * ) 'dp: ' , dp write ( * , * ) 'ep: ' , ep write ( * , * ) 'qp: ' , qp write ( * , * ) 'wp: ' , wp end subroutine printTypes end module kinds_mod © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"sourcefile/kinds.f90.html","title":"kinds.f90 – PlPlot Wrapper"},{"text":"main.f90 Source File Source File main.f90 Programs main_prg All Source Files kinds.f90 main.f90 plplot.f90 program main_prg use kinds_mod use plplot_mod implicit none call setup ( colormap = 'BlueYellow' ) call testPlot call testScatter call testContour call testLegend call show contains subroutine testPlot integer , parameter :: N = 20 real ( wp ), dimension ( N ) :: x , y integer :: k x = [( real ( k - 1 , wp ) / real ( N - 1 , wp ) , k = 1 , N )] y = x ** 2 - 1.0_wp call figure () call subplot ( 1 , 1 , 1 ) call xylim ( mixval ( x ), mixval ( y )) call plot ( x , y , lineColor = 'red' , lineWidth = 2.0_wp , & & markStyle = '.' , markColor = 'cyan' , markSize = 2.0_wp ) call plot ( x , - 1.0_wp - y , lineColor = 'blue' , lineStyle = ':' , lineWidth = 2.0_wp , & & markStyle = '+' , markColor = 'green' , markSize = 1.0_wp ) call ticks () call labels ( 'x' , 'y' , 'f(x)=x#u2#d-1; g(x)=-x#u2#d' ) end subroutine testPlot subroutine testScatter integer , parameter :: N = 100 real ( wp ), dimension ( N ) :: x , y , z call random_number ( x ) call random_number ( y ) z = sqrt ( x ** 2 + y ** 2 ) call figure () call subplot ( 2 , 2 , 1 ) call xylim ([ 0.0_wp , 1.0_wp ],[ 0.0_wp , 1.0_wp ]) call scatter ( x , y ) call ticks () call labels ( 'x' , 'y' , '' ) call subplot ( 2 , 2 , 2 ) call xylim ([ 0.0_wp , 1.0_wp ],[ 0.0_wp , 1.0_wp ]) call scatter ( x , y , c = z ) call ticks () call labels ( 'x' , 'y' , '' ) call subplot ( 2 , 2 , 3 ) call xylim ([ 0.0_wp , 1.0_wp ],[ 0.0_wp , 1.0_wp ]) call scatter ( x , y , s = ( 4.0_wp * z + 1.0_wp ), markColor = 'blue' ) call ticks () call labels ( 'x' , 'y' , '' ) call subplot ( 2 , 2 , 4 ) call xylim ([ 0.0_wp , 1.0_wp ],[ 0.0_wp , 1.0_wp ]) call scatter ( x , y , c = z , s = ( 4.0_wp * z + 1.0_wp )) call ticks () call labels ( 'x' , 'y' , '' ) end subroutine testScatter subroutine testContour integer , parameter :: N = 100 real ( wp ), dimension ( N ) :: x , y real ( wp ), dimension ( N , N ) :: z integer :: i , j x = 2 0.0_wp * [( real ( i - 1 , wp ) / real ( N - 1 , wp ) , i = 1 , N )] - 1 0.0_wp y = 2 0.0_wp * [( real ( j - 1 , wp ) / real ( N - 1 , wp ) , j = 1 , N )] - 1 0.0_wp forall ( i = 1 : N , j = 1 : N ) z ( i , j ) = sin ( sqrt ( x ( i ) ** 2 + y ( j ) ** 2 ) ) / sqrt ( x ( i ) ** 2 + y ( j ) ** 2 ) end forall call figure () call subplot ( 1 , 1 , 1 , aspect = 1.0_wp ) call xylim ( mixval ( x ), mixval ( y )) call contourf ( x , y , z , 50 ) call contour ( x , y , z , 10 ) call ticks () call labels ( 'x' , 'y' , '' ) end subroutine testContour subroutine testLegend integer , parameter :: N = 20 real ( wp ), dimension ( N ) :: x , y character ( 32 ), dimension ( 2 , 6 ) :: series integer :: k x = [( real ( k - 1 , wp ) / real ( N - 1 , wp ) , k = 1 , N )] y = x ** 2 - 1.0_wp call figure () call subplot ( 1 , 1 , 1 ) call xylim ( mixval ( x ), mixval ( y )) call plot ( x , y , lineColor = 'red' , lineWidth = 2.0_wp , & & markStyle = '.' , markColor = 'cyan' , markSize = 2.0_wp ) call plot ( x , - 1.0_wp - y , lineColor = 'blue' , lineStyle = ':' , lineWidth = 2.0_wp , & & markStyle = '+' , markColor = 'green' , markSize = 1.0_wp ) ! [name,textColor,lineStyle,lineColor,markStyle,markColor] series ( 1 ,:) = [ character ( 32 ) :: 'f(x)=x#u2#d-1' , 'k' , '-' , 'r' , '.' , 'c' ] series ( 2 ,:) = [ character ( 32 ) :: 'g(x)=-x#u2#d' , 'k' , ':' , 'b' , '+' , 'g' ] call legend ( 'center left' , series ) call ticks () call labels ( 'x' , 'y' , '' ) end subroutine testLegend end program main_prg © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"sourcefile/main.f90.html","title":"main.f90 – PlPlot Wrapper"},{"text":"plplot.f90 Source File Source File plplot.f90 Modules plplot_mod All Source Files kinds.f90 main.f90 plplot.f90 module plplot_mod !! Wrapper module for plplot to give it a more matplotlib like personality use kinds_mod use plplot implicit none public character ( * ), parameter :: default_dev = 'qtwidget' !! Default output device !=================! != Library State =! !=================! logical :: isSetup = . false . !! Flag for library setup status logical :: didShow = . false . !! Flag for library display status real ( plflt ) :: fontScale = 1.0_plflt !! Font scale factor to resetPen contains !===================! != Helper Routines =! !===================! function mixval ( x ) result ( b ) real ( wp ), dimension (:), intent ( in ) :: x real ( wp ), dimension ( 2 ) :: b b = [ minval ( x ), maxval ( x )] end function mixval function startsWith ( text , str ) result ( o ) character ( * ), intent ( in ) :: text character ( * ), intent ( in ) :: str logical :: o integer :: k k = len ( str ) o = text ( 1 : k ) == str end function startsWith function endsWith ( text , str ) result ( o ) character ( * ), intent ( in ) :: text character ( * ), intent ( in ) :: str logical :: o integer :: k k = len ( text ) o = text ( k - len ( str ) + 1 : k ) == str end function endsWith !============================! != Axes and Figure Routines =! !============================! subroutine figure !! Create a new figure if (. not . isSetup ) call setup () call pladv ( 0 ) end subroutine figure subroutine subplot ( ny , nx , i , aspect ) !! Create a set of axes on a figure integer , intent ( in ) :: nx !! Number of subplot columns integer , intent ( in ) :: ny !! Number of subplot rows integer , intent ( in ) :: i !! Subplot to use real ( wp ), intent ( in ), optional :: aspect !! Aspect ratio of the axes call plssub ( nx , ny ) call pladv ( i ) call resetPen if ( present ( aspect )) then call plvasp ( real ( aspect , plflt )) else call plvsta () end if end subroutine subplot subroutine xylim ( xb , yb ) !! Set the x and y ranges of the plot real ( wp ), dimension ( 2 ), intent ( in ) :: xb !! x-range of plot real ( wp ), dimension ( 2 ), intent ( in ) :: yb !! y-range of plot call plwind ( xb ( 1 ), xb ( 2 ), yb ( 1 ), yb ( 2 )) call resetPen end subroutine xylim subroutine ticks ( dx , dy , logx , logy , color , linewidth ) !! Set the ticks for the axes real ( wp ), intent ( in ), optional :: dx !! Spacing between ticks on x-axis real ( wp ), intent ( in ), optional :: dy !! Spacing between ticks on y-axis logical , intent ( in ), optional :: logx !! Flag for log-ticks and labels on x-axis logical , intent ( in ), optional :: logy !! Flag for log-ticks and labels on y-axis character ( * ), intent ( in ), optional :: color !! Color code for ticks, box, and labels real ( wp ), optional :: linewidth !! Line width for ticks and box real ( plflt ) :: dxl , dyl character ( 10 ) :: xopts , yopts dxl = 0.0_plflt if ( present ( dx )) dxl = dx dyl = 0.0_plflt if ( present ( dy )) dyl = dy xopts = 'bcnst' if ( present ( logx )) then if ( logx ) xopts = 'bcnstl' end if yopts = 'bcnstv' if ( present ( logy )) then if ( logy ) yopts = 'bcnstvl' end if if ( present ( color )) call setColor ( color ) if ( present ( linewidth )) call plwidth ( real ( linewidth , plflt )) call plbox ( xopts , dxl , 0 , yopts , dyl , 0 ) end subroutine ticks subroutine labels ( xLabel , yLabel , plotLabel ) !! Set x,y and plot labels character ( * ), intent ( in ) :: xLabel !! Label for x-axis character ( * ), intent ( in ) :: yLabel !! Label for x-axis character ( * ), intent ( in ) :: plotLabel !! Label entire plot call pllab ( xLabel , yLabel , plotLabel ) end subroutine labels subroutine colorbar ( z , N , leftLabel , rightLabel ) !! Add a colorbar to the top of the plot real ( wp ), dimension (:,:), intent ( in ) :: z !! Data used for levels computation integer , intent ( in ) :: N !! Number of levels to compute character ( * ), intent ( in ), optional :: leftLabel !! Label for left side of colorbar character ( * ), intent ( in ), optional :: rightLabel !! Label for right side of colorbar real ( plflt ), dimension (:,:), allocatable :: values character ( 64 ), dimension ( 2 ) :: labels real ( plflt ) :: fill_width real ( plflt ) :: cont_width integer :: cont_color real ( plflt ) :: colorbar_width real ( plflt ) :: colorbar_height integer :: k values = reshape ( & & [( real ( k - 1 , plflt ) / real ( N - 1 , plflt ) * ( maxval ( z ) - minval ( z )) + minval ( z ) , k = 1 , N )], & & [ N , 1 ]) fill_width = 2.0_plflt cont_width = 0.0_plflt cont_color = 1 if ( present ( leftLabel )) labels ( 1 ) = leftLabel if ( present ( rightLabel )) labels ( 2 ) = rightLabel call plcolorbar ( colorbar_width , colorbar_height ,& & ior ( PL_COLORBAR_SHADE , PL_COLORBAR_SHADE_LABEL ), PL_POSITION_TOP ,& & 0.0_plflt , 0.01_plflt , 0.75_plflt , 0.05_plflt ,& & 0 , 1 , 1 , 0.0_plflt , 0.0_plflt , & & cont_color , cont_width , & & [ PL_COLORBAR_LABEL_LEFT , PL_COLORBAR_LABEL_RIGHT ], labels , & & [ 'bcvmt' ],[ 0.0_plflt ],[ 0 ],[ size ( values )], values ) end subroutine colorbar subroutine legend ( corner , series , lineWidths , markScales , markCounts , ncol ) !! Create legend for plot data !! FIXME: Text sizing should be modifiable character ( * ), intent ( in ) :: corner !! Corner for legend character ( * ), dimension (:,:), intent ( in ) :: series !! Data series in rows !! [name,textColor,lineStyle,lineColor,markStyle,markColor] real ( wp ), dimension (:), intent ( in ), optional :: lineWidths !! Line widths for the plots real ( wp ), dimension (:), intent ( in ), optional :: markScales !! Marker sizes for the plots integer , dimension (:), intent ( in ), optional :: markCounts !! Marker counts for the plots integer , intent ( in ), optional :: ncol !! Number of columns real ( plflt ) :: width , height , xoff , yoff real ( plflt ) :: plotWidth integer :: opt , cornerl integer :: bg_color , bb_color , bb_style , lncol , lnrow integer , dimension ( size ( series , 1 )) :: opts real ( plflt ), dimension ( size ( series , 1 )) :: lwidths , mscales integer , dimension ( size ( series , 1 )) :: mcounts , text_colors real ( plflt ) :: text_offset , text_scale , text_spacing , text_justification integer , dimension ( size ( series , 1 )) :: box_colors , box_patterns real ( plflt ), dimension ( size ( series , 1 )) :: box_scales , box_line_widths integer , dimension ( size ( series , 1 )) :: line_colors , line_styles integer , dimension ( size ( series , 1 )) :: mark_colors character ( 64 ), dimension ( size ( series , 1 )) :: mark_styles integer :: k opt = PL_LEGEND_BACKGROUND + PL_LEGEND_BOUNDING_BOX cornerl = getCorner ( corner ) xoff = 0.0_plflt yoff = 0.0_plflt plotWidth = 0.05_wp bg_color = getColorCode ( 'w' ) bb_color = getColorCode ( 'k' ) bb_style = getLineStyleCode ( '-' ) lncol = 1 if ( present ( ncol )) lncol = ncol lnrow = size ( series , 1 ) / lncol opts = 0 do k = 1 , size ( series , 1 ) if ( series ( k , 2 ) /= '' ) opts ( k ) = ior ( opts ( k ), PL_LEGEND_LINE ) if ( series ( k , 5 ) /= '' ) opts ( k ) = ior ( opts ( k ), PL_LEGEND_SYMBOL ) end do lwidths = 1.0_plflt if ( present ( lineWidths )) lwidths = lineWidths mcounts = 2 if ( present ( markCounts )) mcounts = markCounts mscales = 1.0_plflt if ( present ( markScales )) mscales = markScales text_offset = 0.3_plflt text_scale = fontScale text_spacing = 3.0_plflt text_justification = 0.0_plflt do k = 1 , size ( series , 1 ) text_colors = getColorCode ( series ( k , 2 )) end do box_colors = 1 box_patterns = 0 box_scales = 1.0_plflt box_line_widths = 0.0_plflt do k = 1 , size ( series , 1 ) line_colors ( k ) = getColorCode ( series ( k , 4 )) line_styles ( k ) = getLineStyleCode ( series ( k , 3 )) end do do k = 1 , size ( series , 1 ) mark_colors ( k ) = getColorCode ( series ( k , 6 )) mark_styles ( k ) = getSymbolCode ( series ( k , 5 )) end do call pllegend ( width , height , opt , cornerl , xoff , yoff , plotWidth , & & bg_color , bb_color , bb_style , & & lnrow , lncol , size ( series , 1 ), opts , text_offset , & & text_scale , text_spacing , text_justification , text_colors , series (:, 1 ), & & box_colors , box_patterns , box_scales , box_line_widths , & & line_colors , line_styles , lwidths , & & mark_colors , mscales , mcounts , mark_styles ) contains function getCorner ( text ) result ( code ) character ( * ), intent ( in ) :: text integer :: code code = PL_POSITION_INSIDE if ( startsWith ( text , 'upper' ) ) code = code + PL_POSITION_TOP if ( startsWith ( text , 'lower' ) ) code = code + PL_POSITION_BOTTOM if ( endsWith ( text , 'right' ) ) code = code + PL_POSITION_RIGHT if ( endsWith ( text , 'left' ) ) code = code + PL_POSITION_LEFT end function getCorner end subroutine legend !=====================! != Plotting Routines =! !=====================! subroutine scatter ( x , y , c , s , markColor , markStyle , markSize ) !! Create scatter plot of data real ( wp ), dimension (:), intent ( in ) :: x !! x-coordinates of data real ( wp ), dimension (:), intent ( in ) :: y !! y-coordinates of data real ( wp ), dimension (:), intent ( in ), optional :: c !! Data for smooth coloring real ( wp ), dimension (:), intent ( in ), optional :: s !! Data for marker scaling character ( * ), intent ( in ), optional :: markColor !! Color of markers; overridden by z character ( * ), intent ( in ), optional :: markStyle !! Style of markers real ( wp ), intent ( in ), optional :: markSize !! Size of markers real ( plflt ), dimension (:), allocatable :: xl , yl real ( plflt ), dimension (:), allocatable :: cb character ( 32 ) :: code integer :: k xl = x yl = y if ( present ( markColor )) call setColor ( markColor ) code = getSymbolCode ( '' ) if ( present ( markStyle )) code = getSymbolCode ( markStyle ) if ( present ( markSize )) call plssym ( 0.0_plflt , real ( markSize , plflt )) if ( present ( c )) cb = mixval ( c ) do k = 1 , size ( x ) if ( present ( c )) call plcol1 ( ( c ( k ) - cb ( 1 )) / ( cb ( 2 ) - cb ( 1 )) ) if ( present ( s )) call plschr ( 0.0_plflt , s ( k )) if ( present ( s )) call plssym ( 0.0_plflt , s ( k )) call plptex ( x ( k ), y ( k ), 0.0_plflt , 0.0_plflt , 0.5_plflt , code ) end do call resetPen end subroutine scatter subroutine plot ( x , y , lineColor , lineStyle , lineWidth , markColor , markStyle , markSize ) !! Plot data using lines and or markers real ( wp ), dimension (:), intent ( in ) :: x !! x-data for plot real ( wp ), dimension (:), intent ( in ) :: y !! y-data for plot character ( * ), intent ( in ), optional :: lineColor !! Color of line character ( * ), intent ( in ), optional :: lineStyle !! Style of line; '' for no line real ( wp ), intent ( in ), optional :: lineWidth !! Width of line character ( * ), intent ( in ), optional :: markColor !! Color of markers, if any character ( * ), intent ( in ), optional :: markStyle !! Style of markers; '' or absent for none real ( wp ), intent ( in ), optional :: markSize !! Size of markers, if any real ( plflt ), dimension (:), allocatable :: xl , yl character ( 32 ) :: code integer :: k xl = x yl = y if ( present ( lineColor )) call setColor ( lineColor ) if ( present ( lineWidth )) call plwidth ( real ( lineWidth , plflt )) if ( present ( lineStyle )) then call setLineStyle ( lineStyle ) if ( lineStyle /= '' ) call plline ( x , y ) else call plline ( x , y ) end if call resetPen if ( present ( markColor )) call setColor ( markColor ) if ( present ( markSize )) call plssym ( 0.0_plflt , real ( markSize , plflt )) if ( present ( markStyle )) then code = getSymbolCode ( markStyle ) if ( markStyle /= '' ) then do k = 1 , size ( x ) call plptex ( x ( k ), y ( k ), 0.0_plflt , 0.0_plflt , 0.5_plflt , code ) end do end if end if call resetPen end subroutine plot subroutine contour ( x , y , z , N , lineColor , lineStyle , lineWidth ) !! Plot contour lines real ( wp ), dimension (:), intent ( in ) :: x !! x-coordinates of data real ( wp ), dimension (:), intent ( in ) :: y !! y-coordinates of data real ( wp ), dimension (:,:), intent ( in ) :: z !! Data for contouring integer , intent ( in ), optional :: N !! Number of levels to use in contour character ( * ), intent ( in ), optional :: lineColor !! Color of contour lines character ( * ), intent ( in ), optional :: lineStyle !! Style of contour lines real ( wp ), optional :: lineWidth !! Width of contour lines real ( plflt ), dimension (:), allocatable :: xl , yl real ( plflt ), dimension (:,:), allocatable :: zl real ( plflt ), dimension (:), allocatable :: edge integer :: Nl , k xl = x yl = y zl = z Nl = 20 if ( present ( N )) Nl = N edge = [( real ( k - 1 , plflt ) / real ( Nl - 1 , plflt ) * ( maxval ( zl ) - minval ( zl )) + minval ( zl ) , k = 1 , Nl )] if ( present ( lineColor )) call setColor ( lineColor ) if ( present ( lineStyle )) call setLineStyle ( lineStyle ) if ( present ( lineWidth )) call plwidth ( real ( lineWidth , plflt )) call plcont ( zl , edge , x , y ) call resetPen end subroutine contour subroutine contourf ( x , y , z , N ) !! Plot filled contours real ( wp ), dimension (:), intent ( in ) :: x !! x-coordinates of data real ( wp ), dimension (:), intent ( in ) :: y !! y-coordinates of data real ( wp ), dimension (:,:), intent ( in ) :: z !! Data for contouring integer , intent ( in ), optional :: N !! Number of levels to use in contour real ( plflt ), dimension (:), allocatable :: xl , yl real ( plflt ), dimension (:,:), allocatable :: zl real ( plflt ), dimension (:), allocatable :: edge character ( 1 ) :: defined real ( plflt ) :: fill_width real ( plflt ) :: cont_width integer :: cont_color integer :: Nl , k xl = x yl = y zl = z Nl = 20 if ( present ( N )) Nl = N edge = [( real ( k - 1 , plflt ) / real ( Nl - 1 , plflt ) * ( maxval ( zl ) - minval ( zl )) + minval ( zl ) , k = 1 , Nl )] fill_width = - 1.0_plflt cont_width = - 1.0_plflt cont_color = - 1 call plshades ( zl , defined , minval ( xl ), maxval ( xl ), minval ( yl ), maxval ( yl ), & & edge , fill_width , cont_color , cont_width ) call resetPen end subroutine contourf subroutine quiver ( x , y , u , v , scaling , lineColor , lineStyle , lineWidth ) !! Plot vectors real ( wp ), dimension (:), intent ( in ) :: x !! x-positions of vectors real ( wp ), dimension (:), intent ( in ) :: y !! y-positions of vectors real ( wp ), dimension (:,:), intent ( in ) :: u !! u-components of vectors real ( wp ), dimension (:,:), intent ( in ) :: v !! v-components of vectors real ( wp ), intent ( in ), optional :: scaling !! Scaling of vectors !! < 0 = Automatic, then scaled !!   0 = Automatic !! > 0 = Directly scaled character ( * ), intent ( in ), optional :: lineColor !! Color of vectors character ( * ), intent ( in ), optional :: lineStyle !! Style of vectors' lines real ( wp ), optional :: lineWidth !! Width of vectors' lines real ( plflt ), dimension (:), allocatable :: xl , yl real ( plflt ), dimension (:,:), allocatable :: ul , vl real ( plflt ) :: scalingl xl = x yl = y ul = u vl = v scalingl = 0.0_plflt if ( present ( scaling )) scalingl = scaling if ( present ( lineColor )) call setColor ( lineColor ) if ( present ( lineStyle )) call setLineStyle ( lineStyle ) if ( present ( lineWidth )) call plwidth ( real ( lineWidth , plflt )) call plvect ( ul , vl , scalingl , xl , yl ) call resetPen end subroutine quiver !========================! != Drawing Pen Routines =! !========================! subroutine resetPen !! Reset pen to default state call setColor ( '' ) call setLineStyle ( '' ) call plwidth ( 0.5_plflt ) call plschr ( 0.0_plflt , real ( fontScale , plflt )) call plssym ( 0.0_plflt , real ( fontScale , plflt )) end subroutine resetPen subroutine setLineStyle ( style ) !! Set the current pen line style character ( * ), intent ( in ) :: style !! Style to set call pllsty ( getLineStyleCode ( style )) end subroutine setLineStyle function getLineStyleCode ( style ) result ( code ) character ( * ), intent ( in ) :: style integer :: code select case ( style ) case ( '-' ) code = 1 case ( ':' ) code = 2 case ( '--' ) code = 3 case default code = 1 end select end function getLineStyleCode function getSymbolCode ( style ) result ( code ) !! Return the code for a symbol style character ( * ), intent ( in ) :: style !! Style desired character ( 32 ) :: code select case ( style ) case ( '+' ) code = '#(140)' case ( 'x' ) code = '#(141)' case ( '*' ) code = '#(142)' case ( '.' ) code = '#(143)' case ( 's' ) code = '#(144)' case ( ',' ) code = '#(850)' case ( '&#94;' ) code = '#(852)' case ( '<' ) code = '#(853)' case ( 'v' ) code = '#(854)' case ( '>' ) code = '#(855)' case default code = '#(143)' end select end function getSymbolCode subroutine setColor ( color ) !! Set the current pen color character ( * ), intent ( in ) :: color !! Name of color to set call plcol0 ( getColorCode ( color )) end subroutine setColor function getColorCode ( color ) result ( code ) character ( * ), intent ( in ) :: color integer :: code select case ( color ) case ( 'w' , 'white' ) code = 1 case ( 'k' , 'black' ) code = 2 case ( 'r' , 'red' ) code = 3 case ( 'g' , 'green' ) code = 4 case ( 'b' , 'blue' ) code = 5 case ( 'c' , 'cyan' ) code = 6 case ( 'm' , 'magenta' ) code = 7 case ( 'y' , 'yellow' ) code = 8 case default code = 2 end select code = code - 1 end function getColorCode !===========================! != Library Status Routines =! !===========================! subroutine setup ( device , fileName , fontScaling , colormap ) !! Setup PlPlot library, optionally overriding defaults character ( * ), intent ( in ), optional :: device !! Output device to use character ( * ), intent ( in ), optional :: fileName !! Name of file(s) to write to !! %n will be replaced with the figure number real ( wp ), intent ( in ), optional :: fontScaling !! Font scaling relative to default value character ( * ), intent ( in ), optional :: colormap !! Colormap to use if ( isSetup ) return isSetup = . true . if ( present ( device )) then call plsdev ( device ) else call plsdev ( default_dev ) end if call plsfam ( 1 , 1 , 100 ) if ( present ( fileName )) then call plsfnam ( fileName ) else call plsfnam ( 'out' ) end if call setIndexedColors if ( present ( colormap )) then call setColormap ( colormap ) else call setColormap ( 'CoolWarm' ) end if if ( present ( fontScaling )) fontScale = fontScaling call plinit call resetPen end subroutine setup subroutine show !! Show the plots end finialize the PlPlot library if (. not . didShow ) then call plend didShow = . true . end if end subroutine show !======================! != Color Map Routines =! !======================! subroutine setIndexedColors !! Setup the indexed colors integer , dimension ( 8 , 3 ) :: rgb rgb ( 1 ,:) = [ 255 , 255 , 255 ] ! White rgb ( 2 ,:) = [ 0 , 0 , 0 ] ! Black rgb ( 3 ,:) = [ 255 , 0 , 0 ] ! Red rgb ( 4 ,:) = [ 0 , 255 , 0 ] ! Green rgb ( 5 ,:) = [ 0 , 0 , 255 ] ! Blue rgb ( 6 ,:) = [ 0 , 255 , 255 ] ! Cyan rgb ( 7 ,:) = [ 255 , 0 , 255 ] ! Magenta rgb ( 8 ,:) = [ 255 , 255 , 255 ] ! Yellow call plscmap0 ( rgb (:, 1 ), rgb (:, 2 ), rgb (:, 3 )) end subroutine setIndexedColors subroutine setColormap ( colormap ) !! Set the continuous colormap character ( * ), intent ( in ) :: colormap !! Name of colormap to use real ( plflt ), dimension (:), allocatable :: i , h , s , v select case ( colormap ) case ( 'CoolWarm' ) h = [ 24 0.0 , 19 5.0 , 4 5.0 , 0.0 ] s = [ 0.60 , 0.95 , 0.95 , 0.60 ] v = [ 0.80 , 0.30 , 0.30 , 0.80 ] i = [ 0.00 , 0.50 , 0.50 , 1.00 ] call plscmap1n ( 256 ) call plscmap1l (. false ., i , h , s , v ) case ( 'Gray' ) call plspal1 ( 'cmap1_gray.pal' , 1 ) case ( 'BlueYellow' ) call plspal1 ( 'cmap1_blue_yellow.pal' , 1 ) case ( 'BlueRed' ) call plspal1 ( 'cmap1_blue_red.pal' , 1 ) case ( 'Radar' ) call plspal1 ( 'cmap1_radar.pal' , 1 ) case ( 'HighFreq' ) call plspal1 ( 'cmap1_highfreq.pal' , 1 ) case ( 'LowFreq' ) call plspal1 ( 'cmap1_lowfreq.pal' , 1 ) end select end subroutine setColormap end module plplot_mod © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"sourcefile/plplot.f90.html","title":"plplot.f90 – PlPlot Wrapper"},{"text":"printTypes Subroutine Source File kinds.f90 kinds_mod printTypes All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine printTypes() Arguments None Description Print the integer kinds for each real type © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/printtypes.html","title":"printTypes – PlPlot Wrapper"},{"text":"testPlot Subroutine Source File main.f90 main_prg testPlot Variables N x y k All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim subroutine testPlot() Arguments None Variables Type Visibility Attributes Name Initial integer, public, parameter :: N = 20 real(kind=wp), public, dimension(N) :: x real(kind=wp), public, dimension(N) :: y integer, public :: k © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/testplot.html","title":"testPlot – PlPlot Wrapper"},{"text":"testScatter Subroutine Source File main.f90 main_prg testScatter Variables N x y z All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim subroutine testScatter() Arguments None Variables Type Visibility Attributes Name Initial integer, public, parameter :: N = 100 real(kind=wp), public, dimension(N) :: x real(kind=wp), public, dimension(N) :: y real(kind=wp), public, dimension(N) :: z © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/testscatter.html","title":"testScatter – PlPlot Wrapper"},{"text":"testContour Subroutine Source File main.f90 main_prg testContour Variables N x y z i j All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim subroutine testContour() Arguments None Variables Type Visibility Attributes Name Initial integer, public, parameter :: N = 100 real(kind=wp), public, dimension(N) :: x real(kind=wp), public, dimension(N) :: y real(kind=wp), public, dimension(N,N) :: z integer, public :: i integer, public :: j © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/testcontour.html","title":"testContour – PlPlot Wrapper"},{"text":"testLegend Subroutine Source File main.f90 main_prg testLegend Variables N x y series k All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim subroutine testLegend() Arguments None Variables Type Visibility Attributes Name Initial integer, public, parameter :: N = 20 real(kind=wp), public, dimension(N) :: x real(kind=wp), public, dimension(N) :: y character(len=32), public, dimension(2,6) :: series integer, public :: k © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/testlegend.html","title":"testLegend – PlPlot Wrapper"},{"text":"mixval Function Source File plplot.f90 plplot_mod mixval All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  function mixval(x) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x Return Value real(kind=wp),\n    dimension(2) © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/mixval.html","title":"mixval – PlPlot Wrapper"},{"text":"startsWith Function Source File plplot.f90 plplot_mod startsWith Variables k All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  function startsWith(text, str) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: text character(len=*), intent(in) :: str Return Value logical Variables Type Visibility Attributes Name Initial integer, public :: k © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/startswith.html","title":"startsWith – PlPlot Wrapper"},{"text":"endsWith Function Source File plplot.f90 plplot_mod endsWith Variables k All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  function endsWith(text, str) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: text character(len=*), intent(in) :: str Return Value logical Variables Type Visibility Attributes Name Initial integer, public :: k © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/endswith.html","title":"endsWith – PlPlot Wrapper"},{"text":"getLineStyleCode Function Source File plplot.f90 plplot_mod getLineStyleCode All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  function getLineStyleCode(style) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: style Return Value integer © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/getlinestylecode.html","title":"getLineStyleCode – PlPlot Wrapper"},{"text":"getSymbolCode Function Source File plplot.f90 plplot_mod getSymbolCode All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  function getSymbolCode(style) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: style Style desired Return Value character(len=32) Description Return the code for a symbol style © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/getsymbolcode.html","title":"getSymbolCode – PlPlot Wrapper"},{"text":"getColorCode Function Source File plplot.f90 plplot_mod getColorCode All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  function getColorCode(color) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: color Return Value integer © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/getcolorcode.html","title":"getColorCode – PlPlot Wrapper"},{"text":"figure Subroutine Source File plplot.f90 plplot_mod figure All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine figure() Arguments None Description Create a new figure © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/figure.html","title":"figure – PlPlot Wrapper"},{"text":"subplot Subroutine Source File plplot.f90 plplot_mod subplot All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine subplot(ny, nx, i, aspect) Arguments Type Intent Optional Attributes Name integer, intent(in) :: ny Number of subplot rows integer, intent(in) :: nx Number of subplot columns integer, intent(in) :: i Subplot to use real(kind=wp), intent(in), optional :: aspect Aspect ratio of the axes Description Create a set of axes on a figure © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/subplot.html","title":"subplot – PlPlot Wrapper"},{"text":"xylim Subroutine Source File plplot.f90 plplot_mod xylim All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine xylim(xb, yb) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(2) :: xb x-range of plot real(kind=wp), intent(in), dimension(2) :: yb y-range of plot Description Set the x and y ranges of the plot © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/xylim.html","title":"xylim – PlPlot Wrapper"},{"text":"ticks Subroutine Source File plplot.f90 plplot_mod ticks Variables dxl dyl xopts yopts All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine ticks(dx, dy, logx, logy, color, linewidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), optional :: dx Spacing between ticks on x-axis real(kind=wp), intent(in), optional :: dy Spacing between ticks on y-axis logical, intent(in), optional :: logx Flag for log-ticks and labels on x-axis logical, intent(in), optional :: logy Flag for log-ticks and labels on y-axis character(len=*), intent(in), optional :: color Color code for ticks, box, and labels real(kind=wp), intent(inout), optional :: linewidth Line width for ticks and box Description Set the ticks for the axes Variables Type Visibility Attributes Name Initial real(kind=plflt), public :: dxl real(kind=plflt), public :: dyl character(len=10), public :: xopts character(len=10), public :: yopts © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/ticks.html","title":"ticks – PlPlot Wrapper"},{"text":"labels Subroutine Source File plplot.f90 plplot_mod labels All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine labels(xLabel, yLabel, plotLabel) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: xLabel Label for x-axis character(len=*), intent(in) :: yLabel Label for x-axis character(len=*), intent(in) :: plotLabel Label entire plot Description Set x,y and plot labels © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/labels.html","title":"labels – PlPlot Wrapper"},{"text":"colorbar Subroutine Source File plplot.f90 plplot_mod colorbar Variables values labels fill_width cont_width cont_color colorbar_width colorbar_height k All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine colorbar(z, N, leftLabel, rightLabel) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:,:) :: z Data used for levels computation integer, intent(in) :: N Number of levels to compute character(len=*), intent(in), optional :: leftLabel Label for left side of colorbar character(len=*), intent(in), optional :: rightLabel Label for right side of colorbar Description Add a colorbar to the top of the plot Variables Type Visibility Attributes Name Initial real(kind=plflt), public, dimension(:,:), allocatable :: values character(len=64), public, dimension(2) :: labels real(kind=plflt), public :: fill_width real(kind=plflt), public :: cont_width integer, public :: cont_color real(kind=plflt), public :: colorbar_width real(kind=plflt), public :: colorbar_height integer, public :: k © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/colorbar.html","title":"colorbar – PlPlot Wrapper"},{"text":"legend Subroutine Source File plplot.f90 plplot_mod legend Variables width height xoff yoff plotWidth opt cornerl bg_color bb_color bb_style lncol lnrow opts lwidths mscales mcounts text_colors text_offset text_scale text_spacing text_justification box_colors box_patterns box_scales box_line_widths line_colors line_styles mark_colors mark_styles k Functions getCorner All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine legend(corner, series, lineWidths, markScales, markCounts, ncol) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: corner Corner for legend character(len=*), intent(in), dimension(:,:) :: series Data series in rows\n [name,textColor,lineStyle,lineColor,markStyle,markColor] real(kind=wp), intent(in), optional dimension(:) :: lineWidths Line widths for the plots real(kind=wp), intent(in), optional dimension(:) :: markScales Marker sizes for the plots integer, intent(in), optional dimension(:) :: markCounts Marker counts for the plots integer, intent(in), optional :: ncol Number of columns Description Create legend for plot data\n FIXME: Text sizing should be modifiable Variables Type Visibility Attributes Name Initial real(kind=plflt), public :: width real(kind=plflt), public :: height real(kind=plflt), public :: xoff real(kind=plflt), public :: yoff real(kind=plflt), public :: plotWidth integer, public :: opt integer, public :: cornerl integer, public :: bg_color integer, public :: bb_color integer, public :: bb_style integer, public :: lncol integer, public :: lnrow integer, public, dimension(size(series,1)) :: opts real(kind=plflt), public, dimension(size(series,1)) :: lwidths real(kind=plflt), public, dimension(size(series,1)) :: mscales integer, public, dimension(size(series,1)) :: mcounts integer, public, dimension(size(series,1)) :: text_colors real(kind=plflt), public :: text_offset real(kind=plflt), public :: text_scale real(kind=plflt), public :: text_spacing real(kind=plflt), public :: text_justification integer, public, dimension(size(series,1)) :: box_colors integer, public, dimension(size(series,1)) :: box_patterns real(kind=plflt), public, dimension(size(series,1)) :: box_scales real(kind=plflt), public, dimension(size(series,1)) :: box_line_widths integer, public, dimension(size(series,1)) :: line_colors integer, public, dimension(size(series,1)) :: line_styles integer, public, dimension(size(series,1)) :: mark_colors character(len=64), public, dimension(size(series,1)) :: mark_styles integer, public :: k Functions function getCorner (text) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: text Return Value integer © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/legend.html","title":"legend – PlPlot Wrapper"},{"text":"scatter Subroutine Source File plplot.f90 plplot_mod scatter Variables xl yl cb code k All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine scatter(x, y, c, s, markColor, markStyle, markSize) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-coordinates of data real(kind=wp), intent(in), dimension(:) :: y y-coordinates of data real(kind=wp), intent(in), optional dimension(:) :: c Data for smooth coloring real(kind=wp), intent(in), optional dimension(:) :: s Data for marker scaling character(len=*), intent(in), optional :: markColor Color of markers; overridden by z character(len=*), intent(in), optional :: markStyle Style of markers real(kind=wp), intent(in), optional :: markSize Size of markers Description Create scatter plot of data Variables Type Visibility Attributes Name Initial real(kind=plflt), public, dimension(:), allocatable :: xl real(kind=plflt), public, dimension(:), allocatable :: yl real(kind=plflt), public, dimension(:), allocatable :: cb character(len=32), public :: code integer, public :: k © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/scatter.html","title":"scatter – PlPlot Wrapper"},{"text":"plot Subroutine Source File plplot.f90 plplot_mod plot Variables xl yl code k All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine plot(x, y, lineColor, lineStyle, lineWidth, markColor, markStyle, markSize) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-data for plot real(kind=wp), intent(in), dimension(:) :: y y-data for plot character(len=*), intent(in), optional :: lineColor Color of line character(len=*), intent(in), optional :: lineStyle Style of line; '' for no line real(kind=wp), intent(in), optional :: lineWidth Width of line character(len=*), intent(in), optional :: markColor Color of markers, if any character(len=*), intent(in), optional :: markStyle Style of markers; '' or absent for none real(kind=wp), intent(in), optional :: markSize Size of markers, if any Description Plot data using lines and or markers Variables Type Visibility Attributes Name Initial real(kind=plflt), public, dimension(:), allocatable :: xl real(kind=plflt), public, dimension(:), allocatable :: yl character(len=32), public :: code integer, public :: k © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/plot.html","title":"plot – PlPlot Wrapper"},{"text":"contour Subroutine Source File plplot.f90 plplot_mod contour Variables xl yl zl edge Nl k All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine contour(x, y, z, N, lineColor, lineStyle, lineWidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-coordinates of data real(kind=wp), intent(in), dimension(:) :: y y-coordinates of data real(kind=wp), intent(in), dimension(:,:) :: z Data for contouring integer, intent(in), optional :: N Number of levels to use in contour character(len=*), intent(in), optional :: lineColor Color of contour lines character(len=*), intent(in), optional :: lineStyle Style of contour lines real(kind=wp), intent(inout), optional :: lineWidth Width of contour lines Description Plot contour lines Variables Type Visibility Attributes Name Initial real(kind=plflt), public, dimension(:), allocatable :: xl real(kind=plflt), public, dimension(:), allocatable :: yl real(kind=plflt), public, dimension(:,:), allocatable :: zl real(kind=plflt), public, dimension(:), allocatable :: edge integer, public :: Nl integer, public :: k © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/contour.html","title":"contour – PlPlot Wrapper"},{"text":"contourf Subroutine Source File plplot.f90 plplot_mod contourf Variables xl yl zl edge defined fill_width cont_width cont_color Nl k All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine contourf(x, y, z, N) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-coordinates of data real(kind=wp), intent(in), dimension(:) :: y y-coordinates of data real(kind=wp), intent(in), dimension(:,:) :: z Data for contouring integer, intent(in), optional :: N Number of levels to use in contour Description Plot filled contours Variables Type Visibility Attributes Name Initial real(kind=plflt), public, dimension(:), allocatable :: xl real(kind=plflt), public, dimension(:), allocatable :: yl real(kind=plflt), public, dimension(:,:), allocatable :: zl real(kind=plflt), public, dimension(:), allocatable :: edge character(len=1), public :: defined real(kind=plflt), public :: fill_width real(kind=plflt), public :: cont_width integer, public :: cont_color integer, public :: Nl integer, public :: k © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/contourf.html","title":"contourf – PlPlot Wrapper"},{"text":"quiver Subroutine Source File plplot.f90 plplot_mod quiver Variables xl yl ul vl scalingl All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine quiver(x, y, u, v, scaling, lineColor, lineStyle, lineWidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-positions of vectors real(kind=wp), intent(in), dimension(:) :: y y-positions of vectors real(kind=wp), intent(in), dimension(:,:) :: u u-components of vectors real(kind=wp), intent(in), dimension(:,:) :: v v-components of vectors real(kind=wp), intent(in), optional :: scaling Scaling of vectors\n < 0 = Automatic, then scaled\n   0 = Automatic 0 = Directly scaled character(len=*), intent(in), optional :: lineColor Color of vectors character(len=*), intent(in), optional :: lineStyle Style of vectors' lines real(kind=wp), intent(inout), optional :: lineWidth Width of vectors' lines Description Plot vectors Variables Type Visibility Attributes Name Initial real(kind=plflt), public, dimension(:), allocatable :: xl real(kind=plflt), public, dimension(:), allocatable :: yl real(kind=plflt), public, dimension(:,:), allocatable :: ul real(kind=plflt), public, dimension(:,:), allocatable :: vl real(kind=plflt), public :: scalingl © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/quiver.html","title":"quiver – PlPlot Wrapper"},{"text":"resetPen Subroutine Source File plplot.f90 plplot_mod resetPen All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine resetPen() Arguments None Description Reset pen to default state © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/resetpen.html","title":"resetPen – PlPlot Wrapper"},{"text":"setLineStyle Subroutine Source File plplot.f90 plplot_mod setLineStyle All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine setLineStyle(style) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: style Style to set Description Set the current pen line style © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/setlinestyle.html","title":"setLineStyle – PlPlot Wrapper"},{"text":"setColor Subroutine Source File plplot.f90 plplot_mod setColor All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine setColor(color) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: color Name of color to set Description Set the current pen color © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/setcolor.html","title":"setColor – PlPlot Wrapper"},{"text":"setup Subroutine Source File plplot.f90 plplot_mod setup All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine setup(device, fileName, fontScaling, colormap) Arguments Type Intent Optional Attributes Name character(len=*), intent(in), optional :: device Output device to use character(len=*), intent(in), optional :: fileName Name of file(s) to write to\n %n will be replaced with the figure number real(kind=wp), intent(in), optional :: fontScaling Font scaling relative to default value character(len=*), intent(in), optional :: colormap Colormap to use Description Setup PlPlot library, optionally overriding defaults © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/setup.html","title":"setup – PlPlot Wrapper"},{"text":"show Subroutine Source File plplot.f90 plplot_mod show All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine show() Arguments None Description Show the plots end finialize the PlPlot library © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/show.html","title":"show – PlPlot Wrapper"},{"text":"setIndexedColors Subroutine Source File plplot.f90 plplot_mod setIndexedColors Variables rgb All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine setIndexedColors() Arguments None Description Setup the indexed colors Variables Type Visibility Attributes Name Initial integer, public, dimension(8,3) :: rgb © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/setindexedcolors.html","title":"setIndexedColors – PlPlot Wrapper"},{"text":"setColormap Subroutine Source File plplot.f90 plplot_mod setColormap Variables i h s v All Procedures colorbar contour contourf endsWith figure getColorCode getLineStyleCode getSymbolCode labels legend mixval plot printTypes quiver resetPen scatter setColor setColormap setIndexedColors setLineStyle setup show startsWith subplot testContour testLegend testPlot testScatter ticks xylim public  subroutine setColormap(colormap) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: colormap Name of colormap to use Description Set the continuous colormap Variables Type Visibility Attributes Name Initial real(kind=plflt), public, dimension(:), allocatable :: i real(kind=plflt), public, dimension(:), allocatable :: h real(kind=plflt), public, dimension(:), allocatable :: s real(kind=plflt), public, dimension(:), allocatable :: v © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"proc/setcolormap.html","title":"setColormap – PlPlot Wrapper"},{"text":"kinds_mod Module Source File kinds.f90 kinds_mod Variables wp PI E Subroutines printTypes All Modules kinds_mod plplot_mod Module to manage kinds for the program Variables Type Visibility Attributes Name Initial integer, public, parameter :: wp = dp Set working precision to double real(kind=wp), public, parameter :: PI = 4.0_wp*atan(1.0_wp) Archimedes' constant real(kind=wp), public, parameter :: E = exp(1.0_wp) Euler's constant Subroutines public  subroutine printTypes () Arguments None Description Print the integer kinds for each real type © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"module/kinds_mod.html","title":"kinds_mod – PlPlot Wrapper"},{"text":"plplot_mod Module Source File plplot.f90 plplot_mod Variables default_dev isSetup didShow fontScale Functions mixval startsWith endsWith getLineStyleCode getSymbolCode getColorCode Subroutines figure subplot xylim ticks labels colorbar legend scatter plot contour contourf quiver resetPen setLineStyle setColor setup show setIndexedColors setColormap All Modules kinds_mod plplot_mod Uses: kinds_mod plplot Wrapper module for plplot to give it a more matplotlib like personality Variables Type Visibility Attributes Name Initial character(len=*), public, parameter :: default_dev = 'qtwidget' Default output device logical, public :: isSetup = .false. Flag for library setup status logical, public :: didShow = .false. Flag for library display status real(kind=plflt), public :: fontScale = 1.0_plflt Font scale factor to resetPen Functions public  function mixval (x) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x Return Value real(kind=wp),\n  dimension(2) public  function startsWith (text, str) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: text character(len=*), intent(in) :: str Return Value logical public  function endsWith (text, str) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: text character(len=*), intent(in) :: str Return Value logical public  function getLineStyleCode (style) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: style Return Value integer public  function getSymbolCode (style) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: style Style desired Return Value character(len=32) Description Return the code for a symbol style public  function getColorCode (color) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: color Return Value integer Subroutines public  subroutine figure () Arguments None Description Create a new figure public  subroutine subplot (ny, nx, i, aspect) Arguments Type Intent Optional Attributes Name integer, intent(in) :: ny Number of subplot rows integer, intent(in) :: nx Number of subplot columns integer, intent(in) :: i Subplot to use real(kind=wp), intent(in), optional :: aspect Aspect ratio of the axes Description Create a set of axes on a figure public  subroutine xylim (xb, yb) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(2) :: xb x-range of plot real(kind=wp), intent(in), dimension(2) :: yb y-range of plot Description Set the x and y ranges of the plot public  subroutine ticks (dx, dy, logx, logy, color, linewidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), optional :: dx Spacing between ticks on x-axis real(kind=wp), intent(in), optional :: dy Spacing between ticks on y-axis logical, intent(in), optional :: logx Flag for log-ticks and labels on x-axis logical, intent(in), optional :: logy Flag for log-ticks and labels on y-axis character(len=*), intent(in), optional :: color Color code for ticks, box, and labels real(kind=wp), intent(inout), optional :: linewidth Line width for ticks and box Description Set the ticks for the axes public  subroutine labels (xLabel, yLabel, plotLabel) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: xLabel Label for x-axis character(len=*), intent(in) :: yLabel Label for x-axis character(len=*), intent(in) :: plotLabel Label entire plot Description Set x,y and plot labels public  subroutine colorbar (z, N, leftLabel, rightLabel) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:,:) :: z Data used for levels computation integer, intent(in) :: N Number of levels to compute character(len=*), intent(in), optional :: leftLabel Label for left side of colorbar character(len=*), intent(in), optional :: rightLabel Label for right side of colorbar Description Add a colorbar to the top of the plot public  subroutine legend (corner, series, lineWidths, markScales, markCounts, ncol) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: corner Corner for legend character(len=*), intent(in), dimension(:,:) :: series Data series in rows\n [name,textColor,lineStyle,lineColor,markStyle,markColor] real(kind=wp), intent(in), optional dimension(:) :: lineWidths Line widths for the plots real(kind=wp), intent(in), optional dimension(:) :: markScales Marker sizes for the plots integer, intent(in), optional dimension(:) :: markCounts Marker counts for the plots integer, intent(in), optional :: ncol Number of columns Description Create legend for plot data\n FIXME: Text sizing should be modifiable public  subroutine scatter (x, y, c, s, markColor, markStyle, markSize) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-coordinates of data real(kind=wp), intent(in), dimension(:) :: y y-coordinates of data real(kind=wp), intent(in), optional dimension(:) :: c Data for smooth coloring real(kind=wp), intent(in), optional dimension(:) :: s Data for marker scaling character(len=*), intent(in), optional :: markColor Color of markers; overridden by z character(len=*), intent(in), optional :: markStyle Style of markers real(kind=wp), intent(in), optional :: markSize Size of markers Description Create scatter plot of data public  subroutine plot (x, y, lineColor, lineStyle, lineWidth, markColor, markStyle, markSize) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-data for plot real(kind=wp), intent(in), dimension(:) :: y y-data for plot character(len=*), intent(in), optional :: lineColor Color of line character(len=*), intent(in), optional :: lineStyle Style of line; '' for no line real(kind=wp), intent(in), optional :: lineWidth Width of line character(len=*), intent(in), optional :: markColor Color of markers, if any character(len=*), intent(in), optional :: markStyle Style of markers; '' or absent for none real(kind=wp), intent(in), optional :: markSize Size of markers, if any Description Plot data using lines and or markers public  subroutine contour (x, y, z, N, lineColor, lineStyle, lineWidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-coordinates of data real(kind=wp), intent(in), dimension(:) :: y y-coordinates of data real(kind=wp), intent(in), dimension(:,:) :: z Data for contouring integer, intent(in), optional :: N Number of levels to use in contour character(len=*), intent(in), optional :: lineColor Color of contour lines character(len=*), intent(in), optional :: lineStyle Style of contour lines real(kind=wp), intent(inout), optional :: lineWidth Width of contour lines Description Plot contour lines public  subroutine contourf (x, y, z, N) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-coordinates of data real(kind=wp), intent(in), dimension(:) :: y y-coordinates of data real(kind=wp), intent(in), dimension(:,:) :: z Data for contouring integer, intent(in), optional :: N Number of levels to use in contour Description Plot filled contours public  subroutine quiver (x, y, u, v, scaling, lineColor, lineStyle, lineWidth) Arguments Type Intent Optional Attributes Name real(kind=wp), intent(in), dimension(:) :: x x-positions of vectors real(kind=wp), intent(in), dimension(:) :: y y-positions of vectors real(kind=wp), intent(in), dimension(:,:) :: u u-components of vectors real(kind=wp), intent(in), dimension(:,:) :: v v-components of vectors real(kind=wp), intent(in), optional :: scaling Scaling of vectors\n < 0 = Automatic, then scaled\n   0 = Automatic character(len=*), intent(in), optional :: lineColor Color of vectors character(len=*), intent(in), optional :: lineStyle Style of vectors' lines real(kind=wp), intent(inout), optional :: lineWidth Width of vectors' lines Description Plot vectors public  subroutine resetPen () Arguments None Description Reset pen to default state public  subroutine setLineStyle (style) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: style Style to set Description Set the current pen line style public  subroutine setColor (color) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: color Name of color to set Description Set the current pen color public  subroutine setup (device, fileName, fontScaling, colormap) Arguments Type Intent Optional Attributes Name character(len=*), intent(in), optional :: device Output device to use character(len=*), intent(in), optional :: fileName Name of file(s) to write to\n %n will be replaced with the figure number real(kind=wp), intent(in), optional :: fontScaling Font scaling relative to default value character(len=*), intent(in), optional :: colormap Colormap to use Description Setup PlPlot library, optionally overriding defaults public  subroutine show () Arguments None Description Show the plots end finialize the PlPlot library public  subroutine setIndexedColors () Arguments None Description Setup the indexed colors public  subroutine setColormap (colormap) Arguments Type Intent Optional Attributes Name character(len=*), intent(in) :: colormap Name of colormap to use Description Set the continuous colormap © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"module/plplot_mod.html","title":"plplot_mod – PlPlot Wrapper"},{"text":"main_prg Program Source File main.f90 main_prg Subroutines testPlot testScatter testContour testLegend All Programs main_prg Uses: kinds_mod plplot_mod Subroutines subroutine testPlot () Arguments None subroutine testScatter () Arguments None subroutine testContour () Arguments None subroutine testLegend () Arguments None © 2015 PlPlot Wrapper was written by Dr. Kyle Horne. Documentation generated by FORD .","tags":"","loc":"program/main_prg.html","title":"main_prg – PlPlot Wrapper"}]}